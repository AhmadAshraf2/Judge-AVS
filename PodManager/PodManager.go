// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package PodManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IBitcoinPodManagerBitcoinDepositRequest is an auto generated low-level Go binding around an user-defined struct.
type IBitcoinPodManagerBitcoinDepositRequest struct {
	TransactionId [32]byte
	Amount        *big.Int
	IsPending     bool
}

// PodManagerMetaData contains all meta data concerning the PodManager contract.
var PodManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"appRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIAppRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"bitDSMRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBitDSMRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"confirmBitcoinDeposit\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createPod\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"btcAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegatePod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"appContract\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getBitcoinDepositRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBitcoinPodManager.BitcoinDepositRequest\",\"components\":[{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"isPending\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getBitcoinWithdrawalAddress\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_appRegistry\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_bitDSMRegistry\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"bitDSMServiceManager\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"lockPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"podToApp\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"podToBitcoinDepositRequest\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"isPending\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"podToWithdrawalAddress\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setSignedBitcoinWithdrawTransactionPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"signedBitcoinWithdrawTransaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"undelegatePod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unlockPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"userToPod\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"verifyBitcoinDepositRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinAsTokens\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinCompleteTxRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"preSignedWithdrawTransaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"withdrawAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinPSBTRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"withdrawAddress\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"BitcoinBurned\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinDepositConfirmed\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinMinted\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinWithdrawalCompleteTxRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"preSignedBitcoinTx\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinWithdrawalPSBTRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"withdrawAddress\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinWithdrawnFromPod\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"withdrawAddress\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PodCreated\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PodDelegated\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"appContract\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PodUndelegated\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"VerifyBitcoinDepositRequest\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"bitcoinDepositRequest\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structIBitcoinPodManager.BitcoinDepositRequest\",\"components\":[{\"name\":\"transactionId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"isPending\",\"type\":\"bool\",\"internalType\":\"bool\"}]}],\"anonymous\":false}]",
	Bin: "0x608060405234801561000f575f80fd5b5060043610610153575f3560e01c80638da5cb5b116100bf578063d475ab0311610079578063d475ab03146103ad578063d5062c77146103c0578063ed1dfe0b146103d3578063f2fde38b146103e6578063f99b67c9146103f9578063fe64d4011461040c575f80fd5b80638da5cb5b146103305780638dc45e7a14610341578063bb4fceb914610354578063bb64f76514610367578063c07eea4814610387578063c0c53b8b1461039a575f80fd5b80635c975abb116101105780635c975abb1461023857806367e2fe651461024e578063715018a6146102615780637b390bae146102695780637de2970d1461029157806385974473146102a4575f80fd5b8063221d33001461015757806332d5f8081461016c578063397ee69b146101bf578063547d0bba146101d2578063564ba7a8146102125780635b674bc914610225575b5f80fd5b61016a610165366004611f32565b61041f565b005b61019d61017a366004611f32565b60ce6020525f908152604090208054600182015460029092015490919060ff1683565b6040805193845260208401929092521515908201526060015b60405180910390f35b61016a6101cd366004611f54565b61053d565b6101fa6101e0366004611f32565b60cd6020525f90815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101b6565b61016a610220366004612044565b6106ab565b61016a610233366004611f54565b610982565b60655460ff1660405190151581526020016101b6565b60cb546101fa906001600160a01b031681565b61016a610b77565b6101fa610277366004611f32565b60cc6020525f90815260409020546001600160a01b031681565b61016a61029f366004611f32565b610b8a565b61030c6102b2366004611f32565b60408051606080820183525f80835260208084018290529284018190526001600160a01b0394909416845260ce82529282902082519384018352805484526001810154918401919091526002015460ff1615159082015290565b604080518251815260208084015190820152918101511515908201526060016101b6565b6033546001600160a01b03166101fa565b61016a61034f3660046120b5565b610c80565b60ca546101fa906001600160a01b031681565b61037a610375366004611f32565b610f56565b6040516101b69190612130565b61037a610395366004611f32565b610fed565b61016a6103a8366004612142565b611096565b61016a6103bb366004611f32565b6111f1565b61016a6103ce3660046120b5565b611427565b61016a6103e1366004611f32565b6114b6565b61016a6103f4366004611f32565b6115a7565b61016a61040736600461218a565b611620565b6101fa61041a3660046120b5565b6117f1565b610427611a3b565b6002609754036104525760405162461bcd60e51b8152600401610449906121c1565b60405180910390fd5b60026097556001600160a01b038082165f90815260cd6020526040902054168061048e5760405162461bcd60e51b8152600401610449906121f8565b336001600160a01b038216146104e65760405162461bcd60e51b815260206004820152601b60248201527f4f6e6c792064656c656761746564206170702063616e206c6f636b00000000006044820152606401610449565b816001600160a01b031663f83d08ba6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561051e575f80fd5b505af1158015610530573d5f803e3d5ffd5b5050600160975550505050565b610545611a3b565b6002609754036105675760405162461bcd60e51b8152600401610449906121c1565b600260975560c9546001600160a01b031633146105965760405162461bcd60e51b815260040161044990612223565b6001600160a01b0383165f90815260ce60209081526040918290208251606081018452815480825260018301549382019390935260029091015460ff1615159281019290925283146106235760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081d1c985b9cd858dd1a5bdb881a5960521b6044820152606401610449565b5f60408201526106338483611a81565b836001600160a01b03167fcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef8360405161066e91815260200190565b60405180910390a25050506001600160a01b03165f90815260ce60205260408120818155600180820192909255600201805460ff19169055609755565b6106b3611a3b565b6002609754036106d55760405162461bcd60e51b8152600401610449906121c1565b6002609755335f90815260cc602052604090205483906001600160a01b038083169116146107155760405162461bcd60e51b81526004016104499061229b565b6001600160a01b0384165f90815260cf602052604090208054610737906122c6565b1590506107865760405162461bcd60e51b815260206004820152601c60248201527f5769746864726177616c20616c726561647920726571756573746564000000006044820152606401610449565b5f8251116107d15760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207769746864726177206164647265737360401b6044820152606401610449565b836001600160a01b031663a4e2d6346040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083191906122fe565b1561086e5760405162461bcd60e51b815260206004820152600d60248201526c141bd9081a5cc81b1bd8dad959609a1b6044820152606401610449565b6001600160a01b038481165f90815260cd602052604090205416156108a55760405162461bcd60e51b81526004016104499061231d565b5f846001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109069190612347565b6001600160a01b0386165f90815260cf6020526040902090915061092a84826123ae565b50806001600160a01b0316856001600160a01b03167fef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f68660405161096e9190612130565b60405180910390a350506001609755505050565b61098a611a3b565b6002609754036109ac5760405162461bcd60e51b8152600401610449906121c1565b6002609755335f90815260cc602052604090205483906001600160a01b038083169116146109ec5760405162461bcd60e51b81526004016104499061229b565b6001600160a01b0384165f90815260ce602052604090206002015460ff1615610a575760405162461bcd60e51b815260206004820152601760248201527f5265717565737420616c72656164792070656e64696e670000000000000000006044820152606401610449565b60408051606081018252848152602080820185815260018385018181526001600160a01b038a165f81815260ce865287812096518755935192860192909255516002909401805460ff1916941515949094179093558351631cfe878d60e31b81529351909363e7f43c689260048083019391928290030181865afa158015610ae1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b059190612347565b60408051606080820183528782526020808301888152600193850193845284518a815290519181019190915291511515928201929092529192506001600160a01b0380841692908816917f19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e910161096e565b610b7f611bc7565b610b885f611c21565b565b610b92611a3b565b600260975403610bb45760405162461bcd60e51b8152600401610449906121c1565b60026097556001600160a01b038082165f90815260cd60205260409020541680610bf05760405162461bcd60e51b8152600401610449906121f8565b336001600160a01b03821614610c485760405162461bcd60e51b815260206004820152601d60248201527f4f6e6c792064656c656761746564206170702063616e20756e6c6f636b0000006044820152606401610449565b816001600160a01b031663a69df4b56040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561051e575f80fd5b610c88611a3b565b600260975403610caa5760405162461bcd60e51b8152600401610449906121c1565b6002609755335f90815260cc602052604090205482906001600160a01b03808316911614610cea5760405162461bcd60e51b81526004016104499061229b565b6001600160a01b0383165f90815260cf602052604090208054610d0c906122c6565b159050610d5b5760405162461bcd60e51b815260206004820152601c60248201527f5769746864726177616c20616c726561647920726571756573746564000000006044820152606401610449565b5f825111610da65760405162461bcd60e51b8152602060048201526018602482015277496e76616c6964207769746864726177206164647265737360401b6044820152606401610449565b826001600160a01b031663a4e2d6346040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e0691906122fe565b15610e435760405162461bcd60e51b815260206004820152600d60248201526c141bd9081a5cc81b1bd8dad959609a1b6044820152606401610449565b6001600160a01b038381165f90815260cd60205260409020541615610e7a5760405162461bcd60e51b81526004016104499061231d565b5f836001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610edb9190612347565b6001600160a01b0385165f90815260cf60205260409020909150610eff84826123ae565b50806001600160a01b0316846001600160a01b03167fe23f5e191fba9e1a998780fccbaac7b46f1566a2203fbb663852dcbc1cf15c1285604051610f439190612130565b60405180910390a3505060016097555050565b60cf6020525f908152604090208054610f6e906122c6565b80601f0160208091040260200160405190810160405280929190818152602001828054610f9a906122c6565b8015610fe55780601f10610fbc57610100808354040283529160200191610fe5565b820191905f5260205f20905b815481529060010190602001808311610fc857829003601f168201915b505050505081565b6001600160a01b0381165f90815260cf60205260409020805460609190611013906122c6565b80601f016020809104026020016040519081016040528092919081815260200182805461103f906122c6565b801561108a5780601f106110615761010080835404028352916020019161108a565b820191905f5260205f20905b81548152906001019060200180831161106d57829003601f168201915b50505050509050919050565b5f54610100900460ff16158080156110b457505f54600160ff909116105b806110cd5750303b1580156110cd57505f5460ff166001145b6111305760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610449565b5f805460ff191660011790558015611151575f805461ff0019166101001790555b611159611c72565b611161611ca0565b611169611cce565b60ca80546001600160a01b038087166001600160a01b03199283161790925560cb805486841690831617905560c980549285169290911691909117905580156111eb575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6111f9611a3b565b60026097540361121b5760405162461bcd60e51b8152600401610449906121c1565b600260975560c9546001600160a01b0316331461124a5760405162461bcd60e51b815260040161044990612223565b6001600160a01b0381165f90815260cf60205260409020805461126c906122c6565b90505f036112b45760405162461bcd60e51b8152602060048201526015602482015274139bc81dda5d1a191c985dd85b081c995c5d595cdd605a1b6044820152606401610449565b6001600160a01b0381165f90815260cf6020526040812080546112d6906122c6565b80601f0160208091040260200160405190810160405280929190818152602001828054611302906122c6565b801561134d5780601f106113245761010080835404028352916020019161134d565b820191905f5260205f20905b81548152906001019060200180831161133057829003601f168201915b505050505090506113bd82836001600160a01b031663149c0b5c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611394573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113b8919061246a565b611cfc565b816001600160a01b03167f72251995fbf4afbeb2ff2e8d45b74824865f5d1698cc4177299493df9d1372f2826040516113f69190612130565b60405180910390a26001600160a01b0382165f90815260cf6020526040812061141e91611ec2565b50506001609755565b61142f611a3b565b60c9546001600160a01b031633146114595760405162461bcd60e51b815260040161044990612223565b60405163326cca8560e01b81526001600160a01b0383169063326cca8590611485908490600401612130565b5f604051808303815f87803b15801561149c575f80fd5b505af11580156114ae573d5f803e3d5ffd5b505050505050565b6114be611a3b565b6002609754036114e05760405162461bcd60e51b8152600401610449906121c1565b6002609755335f90815260cc60205260409020546001600160a01b0382811691161461151e5760405162461bcd60e51b81526004016104499061229b565b6001600160a01b038181165f90815260cd6020526040902054166115545760405162461bcd60e51b8152600401610449906121f8565b6001600160a01b0381165f81815260cd602052604080822080546001600160a01b0319169055517ffde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a9190a2506001609755565b6115af611bc7565b6001600160a01b0381166116145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610449565b61161d81611c21565b50565b611628611a3b565b60026097540361164a5760405162461bcd60e51b8152600401610449906121c1565b6002609755335f90815260cc60205260409020546001600160a01b038381169116146116885760405162461bcd60e51b81526004016104499061229b565b60ca54604051638403be9160e01b81526001600160a01b03838116600483015290911690638403be9190602401602060405180830381865afa1580156116d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116f491906122fe565b6117375760405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a5908185c1c0818dbdb9d1c9858dd60621b6044820152606401610449565b6001600160a01b038281165f90815260cd602052604090205416156117965760405162461bcd60e51b8152602060048201526015602482015274141bd908185b1c9958591e4819195b1959d85d1959605a1b6044820152606401610449565b6001600160a01b038281165f81815260cd602052604080822080546001600160a01b0319169486169485179055517fef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d9190a350506001609755565b5f6117fa611a3b565b60026097540361181c5760405162461bcd60e51b8152600401610449906121c1565b6002609755335f90815260cc60205260409020546001600160a01b03161561187f5760405162461bcd60e51b8152602060048201526016602482015275155cd95c88185b1c9958591e481a185cc818481c1bd960521b6044820152606401610449565b60cb5460405163c8bc872360e01b81526001600160a01b0385811660048301529091169063c8bc872390602401602060405180830381865afa1580156118c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118eb91906122fe565b61192a5760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b21037b832b930ba37b960811b6044820152606401610449565b60cb546040516339c2182760e01b81526001600160a01b0385811660048301525f9216906339c21827906024015f60405180830381865afa158015611971573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526119989190810190612481565b90505f33858386306040516119ac90611ef9565b6119ba9594939291906124f6565b604051809103905ff0801580156119d3573d5f803e3d5ffd5b50335f81815260cc602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591519495508916939092917f9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef991a46001609755949350505050565b60655460ff1615610b885760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610449565b6001600160a01b038281165f90815260cd60205260409020541615611ab85760405162461bcd60e51b81526004016104499061231d565b5f8290505f816001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611af9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b1d9190612347565b6040516340c10f1960e01b81526001600160a01b03808316600483015260248201869052919250908316906340c10f19906044015f604051808303815f87803b158015611b68575f80fd5b505af1158015611b7a573d5f803e3d5ffd5b50505050836001600160a01b03167f5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd384604051611bb991815260200190565b60405180910390a250505050565b6033546001600160a01b03163314610b885760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610449565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b5f54610100900460ff16611c985760405162461bcd60e51b815260040161044990612547565b610b88611e34565b5f54610100900460ff16611cc65760405162461bcd60e51b815260040161044990612547565b610b88611e63565b5f54610100900460ff16611cf45760405162461bcd60e51b815260040161044990612547565b610b88611e95565b6001600160a01b038281165f90815260cd60205260409020541615611d335760405162461bcd60e51b81526004016104499061231d565b5f8290505f816001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d74573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d989190612347565b604051632770a7eb60e21b81526001600160a01b0380831660048301526024820186905291925090831690639dc29fac906044015f604051808303815f87803b158015611de3575f80fd5b505af1158015611df5573d5f803e3d5ffd5b50505050836001600160a01b03167fab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d84604051611bb991815260200190565b5f54610100900460ff16611e5a5760405162461bcd60e51b815260040161044990612547565b610b8833611c21565b5f54610100900460ff16611e895760405162461bcd60e51b815260040161044990612547565b6065805460ff19169055565b5f54610100900460ff16611ebb5760405162461bcd60e51b815260040161044990612547565b6001609755565b508054611ece906122c6565b5f825580601f10611edd575050565b601f0160209004905f5260205f209081019061161d9190611f06565b610f668061259383390190565b5b80821115611f1a575f8155600101611f07565b5090565b6001600160a01b038116811461161d575f80fd5b5f60208284031215611f42575f80fd5b8135611f4d81611f1e565b9392505050565b5f805f60608486031215611f66575f80fd5b8335611f7181611f1e565b95602085013595506040909401359392505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611fc357611fc3611f86565b604052919050565b5f67ffffffffffffffff821115611fe457611fe4611f86565b50601f01601f191660200190565b5f82601f830112612001575f80fd5b813561201461200f82611fcb565b611f9a565b818152846020838601011115612028575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f60608486031215612056575f80fd5b833561206181611f1e565b9250602084013567ffffffffffffffff8082111561207d575f80fd5b61208987838801611ff2565b9350604086013591508082111561209e575f80fd5b506120ab86828701611ff2565b9150509250925092565b5f80604083850312156120c6575f80fd5b82356120d181611f1e565b9150602083013567ffffffffffffffff8111156120ec575f80fd5b6120f885828601611ff2565b9150509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611f4d6020830184612102565b5f805f60608486031215612154575f80fd5b833561215f81611f1e565b9250602084013561216f81611f1e565b9150604084013561217f81611f1e565b809150509250925092565b5f806040838503121561219b575f80fd5b82356121a681611f1e565b915060208301356121b681611f1e565b809150509250929050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602080825260119082015270141bd9081b9bdd0819195b1959d85d1959607a1b604082015260600190565b60208082526052908201527f426974636f696e506f644d616e616765722e6f6e6c7942697444534d5365727660408201527f6963654d616e616765723a2063616c6c6572206973206e6f74207468652042696060820152713a2229a6a9b2b93b34b1b2a6b0b730b3b2b960711b608082015260a00190565b6020808252601190820152702737ba103a3432903837b21037bbb732b960791b604082015260600190565b600181811c908216806122da57607f821691505b6020821081036122f857634e487b7160e01b5f52602260045260245ffd5b50919050565b5f6020828403121561230e575f80fd5b81518015158114611f4d575f80fd5b60208082526010908201526f141bd9081a5cc819195b1959d85d195960821b604082015260600190565b5f60208284031215612357575f80fd5b8151611f4d81611f1e565b601f8211156123a957805f5260205f20601f840160051c810160208510156123875750805b601f840160051c820191505b818110156123a6575f8155600101612393565b50505b505050565b815167ffffffffffffffff8111156123c8576123c8611f86565b6123dc816123d684546122c6565b84612362565b602080601f83116001811461240f575f84156123f85750858301515b5f19600386901b1c1916600185901b1785556114ae565b5f85815260208120601f198616915b8281101561243d5788860151825594840194600190910190840161241e565b508582101561245a57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f6020828403121561247a575f80fd5b5051919050565b5f60208284031215612491575f80fd5b815167ffffffffffffffff8111156124a7575f80fd5b8201601f810184136124b7575f80fd5b80516124c561200f82611fcb565b8181528560208385010111156124d9575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b5f60018060a01b038088168352808716602084015260a0604084015261251f60a0840187612102565b83810360608501526125318187612102565b9250508084166080840152509695505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe60a060405234801561000f575f80fd5b50604051610f66380380610f6683398101604081905261002e91610194565b6100378561008c565b606580546001600160a01b0319166001600160a01b038616179055606661005e84826102a8565b50606761006b83826102a8565b506001600160a01b031660805250506069805460ff19169055506103679050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b80516001600160a01b03811681146100f3575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261011b575f80fd5b81516001600160401b0380821115610135576101356100f8565b604051601f8301601f19908116603f0116810190828211818310171561015d5761015d6100f8565b81604052838152866020858801011115610175575f80fd5b8360208701602083015e5f602085830101528094505050505092915050565b5f805f805f60a086880312156101a8575f80fd5b6101b1866100dd565b94506101bf602087016100dd565b60408701519094506001600160401b03808211156101db575f80fd5b6101e789838a0161010c565b945060608801519150808211156101fc575f80fd5b506102098882890161010c565b925050610218608087016100dd565b90509295509295909350565b600181811c9082168061023857607f821691505b60208210810361025657634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102a357805f5260205f20601f840160051c810160208510156102815750805b601f840160051c820191505b818110156102a0575f815560010161028d565b50505b505050565b81516001600160401b038111156102c1576102c16100f8565b6102d5816102cf8454610224565b8461025c565b602080601f831160018114610308575f84156102f15750858301515b5f19600386901b1c1916600185901b17855561035f565b5f85815260208120601f198616915b8281101561033657888601518255948401946001909101908401610317565b508582101561035357878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b608051610bc46103a25f395f818161019c015281816103300152818161039101528181610501015281816105f501526106de0152610bc45ff3fe608060405234801561000f575f80fd5b5060043610610132575f3560e01c80637651bc92116100b4578063b7df39b311610079578063b7df39b31461024c578063be40c6c314610254578063cf3090121461025c578063e7f43c6814610269578063f2fde38b1461027a578063f83d08ba1461028d575f80fd5b80637651bc92146102015780638da5cb5b146102095780639dc29fac1461021a578063a4e2d6341461022d578063a69df4b514610244575f80fd5b8063481c6a75116100fa578063481c6a75146101975780635271f840146101d657806352ebd04b146101de578063570ca735146101e6578063715018a6146101f9575f80fd5b8063069a958914610136578063149c0b5c146101545780632c59f18814610166578063326cca851461016f57806340c10f1914610184575b5f80fd5b61013e610295565b60405161014b91906107f8565b60405180910390f35b6068545b60405190815260200161014b565b61015860685481565b61018261017d366004610841565b610325565b005b610182610192366004610907565b610386565b6101be7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014b565b61013e61043b565b61013e6104c7565b6065546101be906001600160a01b031681565b6101826104d6565b61013e6104e9565b6033546001600160a01b03166101be565b610182610228366004610907565b6104f6565b60695460ff165b604051901515815260200161014b565b6101826105ea565b61013e61063e565b61013e61064b565b6069546102349060ff1681565b6065546001600160a01b03166101be565b61018261028836600461092f565b61065a565b6101826106d3565b6060606680546102a49061094f565b80601f01602080910402602001604051908101604052809291908181526020018280546102d09061094f565b801561031b5780601f106102f25761010080835404028352916020019161031b565b820191905f5260205f20905b8154815290600101906020018083116102fe57829003601f168201915b5050505050905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103765760405162461bcd60e51b815260040161036d90610987565b60405180910390fd5b606a6103828282610a17565b5050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ce5760405162461bcd60e51b815260040161036d90610987565b60655482906001600160a01b038083169116146103fd5760405162461bcd60e51b815260040161036d90610ad7565b60695460ff16156104205760405162461bcd60e51b815260040161036d90610b27565b8160685f8282546104319190610b62565b9091555050505050565b606a80546104489061094f565b80601f01602080910402602001604051908101604052809291908181526020018280546104749061094f565b80156104bf5780601f10610496576101008083540402835291602001916104bf565b820191905f5260205f20905b8154815290600101906020018083116104a257829003601f168201915b505050505081565b6060606a80546102a49061094f565b6104de61074d565b6104e75f6107a7565b565b606780546104489061094f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461053e5760405162461bcd60e51b815260040161036d90610987565b60655482906001600160a01b0380831691161461056d5760405162461bcd60e51b815260040161036d90610ad7565b60695460ff16156105905760405162461bcd60e51b815260040161036d90610b27565b8160685410156105d95760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161036d565b8160685f8282546104319190610b7b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106325760405162461bcd60e51b815260040161036d90610987565b6069805460ff19169055565b606680546104489061094f565b6060606780546102a49061094f565b61066261074d565b6001600160a01b0381166106c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161036d565b6106d0816107a7565b50565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461071b5760405162461bcd60e51b815260040161036d90610987565b60695460ff161561073e5760405162461bcd60e51b815260040161036d90610b27565b6069805460ff19166001179055565b6033546001600160a01b031633146104e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161036d565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610851575f80fd5b813567ffffffffffffffff80821115610868575f80fd5b818401915084601f83011261087b575f80fd5b81358181111561088d5761088d61082d565b604051601f8201601f19908116603f011681019083821181831017156108b5576108b561082d565b816040528281528760208487010111156108cd575f80fd5b826020860160208301375f928101602001929092525095945050505050565b80356001600160a01b0381168114610902575f80fd5b919050565b5f8060408385031215610918575f80fd5b610921836108ec565b946020939093013593505050565b5f6020828403121561093f575f80fd5b610948826108ec565b9392505050565b600181811c9082168061096357607f821691505b60208210810361098157634e487b7160e01b5f52602260045260245ffd5b50919050565b60208082526024908201527f4f6e6c79206d616e616765722063616e20706572666f726d20746869732061636040820152633a34b7b760e11b606082015260800190565b601f821115610a1257805f5260205f20601f840160051c810160208510156109f05750805b601f840160051c820191505b81811015610a0f575f81556001016109fc565b50505b505050565b815167ffffffffffffffff811115610a3157610a3161082d565b610a4581610a3f845461094f565b846109cb565b602080601f831160018114610a78575f8415610a615750858301515b5f19600386901b1c1916600185901b178555610acf565b5f85815260208120601f198616915b82811015610aa657888601518255948401946001909101908401610a87565b5085821015610ac357878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60208082526030908201527f4f6e6c792064657369676e61746564206f70657261746f722063616e2070657260408201526f3337b936903a3434b99030b1ba34b7b760811b606082015260800190565b6020808252600d908201526c141bd9081a5cc81b1bd8dad959609a1b604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610b7557610b75610b4e565b92915050565b81810381811115610b7557610b75610b4e56fea264697066735822122070cd1c39ec24022669983ea6bcc3c0bea95c20ca3e4045046ab8e194c53d1a9864736f6c63430008190033a2646970667358221220fc227e6813e47fbfb095da57bd45a9f7874cceb4a17b9fea9bfbefd3cb1f891364736f6c63430008190033",
}

// PodManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use PodManagerMetaData.ABI instead.
var PodManagerABI = PodManagerMetaData.ABI

// PodManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PodManagerMetaData.Bin instead.
var PodManagerBin = PodManagerMetaData.Bin

// DeployPodManager deploys a new Ethereum contract, binding an instance of PodManager to it.
func DeployPodManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PodManager, error) {
	parsed, err := PodManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PodManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PodManager{PodManagerCaller: PodManagerCaller{contract: contract}, PodManagerTransactor: PodManagerTransactor{contract: contract}, PodManagerFilterer: PodManagerFilterer{contract: contract}}, nil
}

// PodManager is an auto generated Go binding around an Ethereum contract.
type PodManager struct {
	PodManagerCaller     // Read-only binding to the contract
	PodManagerTransactor // Write-only binding to the contract
	PodManagerFilterer   // Log filterer for contract events
}

// PodManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type PodManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PodManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PodManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PodManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PodManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PodManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PodManagerSession struct {
	Contract     *PodManager       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PodManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PodManagerCallerSession struct {
	Contract *PodManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// PodManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PodManagerTransactorSession struct {
	Contract     *PodManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// PodManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type PodManagerRaw struct {
	Contract *PodManager // Generic contract binding to access the raw methods on
}

// PodManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PodManagerCallerRaw struct {
	Contract *PodManagerCaller // Generic read-only contract binding to access the raw methods on
}

// PodManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PodManagerTransactorRaw struct {
	Contract *PodManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPodManager creates a new instance of PodManager, bound to a specific deployed contract.
func NewPodManager(address common.Address, backend bind.ContractBackend) (*PodManager, error) {
	contract, err := bindPodManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PodManager{PodManagerCaller: PodManagerCaller{contract: contract}, PodManagerTransactor: PodManagerTransactor{contract: contract}, PodManagerFilterer: PodManagerFilterer{contract: contract}}, nil
}

// NewPodManagerCaller creates a new read-only instance of PodManager, bound to a specific deployed contract.
func NewPodManagerCaller(address common.Address, caller bind.ContractCaller) (*PodManagerCaller, error) {
	contract, err := bindPodManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PodManagerCaller{contract: contract}, nil
}

// NewPodManagerTransactor creates a new write-only instance of PodManager, bound to a specific deployed contract.
func NewPodManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*PodManagerTransactor, error) {
	contract, err := bindPodManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PodManagerTransactor{contract: contract}, nil
}

// NewPodManagerFilterer creates a new log filterer instance of PodManager, bound to a specific deployed contract.
func NewPodManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*PodManagerFilterer, error) {
	contract, err := bindPodManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PodManagerFilterer{contract: contract}, nil
}

// bindPodManager binds a generic wrapper to an already deployed contract.
func bindPodManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PodManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PodManager *PodManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PodManager.Contract.PodManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PodManager *PodManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.Contract.PodManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PodManager *PodManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PodManager.Contract.PodManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PodManager *PodManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PodManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PodManager *PodManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PodManager *PodManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PodManager.Contract.contract.Transact(opts, method, params...)
}

// AppRegistry is a free data retrieval call binding the contract method 0xbb4fceb9.
//
// Solidity: function appRegistry() view returns(address)
func (_PodManager *PodManagerCaller) AppRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "appRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AppRegistry is a free data retrieval call binding the contract method 0xbb4fceb9.
//
// Solidity: function appRegistry() view returns(address)
func (_PodManager *PodManagerSession) AppRegistry() (common.Address, error) {
	return _PodManager.Contract.AppRegistry(&_PodManager.CallOpts)
}

// AppRegistry is a free data retrieval call binding the contract method 0xbb4fceb9.
//
// Solidity: function appRegistry() view returns(address)
func (_PodManager *PodManagerCallerSession) AppRegistry() (common.Address, error) {
	return _PodManager.Contract.AppRegistry(&_PodManager.CallOpts)
}

// BitDSMRegistry is a free data retrieval call binding the contract method 0x67e2fe65.
//
// Solidity: function bitDSMRegistry() view returns(address)
func (_PodManager *PodManagerCaller) BitDSMRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "bitDSMRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BitDSMRegistry is a free data retrieval call binding the contract method 0x67e2fe65.
//
// Solidity: function bitDSMRegistry() view returns(address)
func (_PodManager *PodManagerSession) BitDSMRegistry() (common.Address, error) {
	return _PodManager.Contract.BitDSMRegistry(&_PodManager.CallOpts)
}

// BitDSMRegistry is a free data retrieval call binding the contract method 0x67e2fe65.
//
// Solidity: function bitDSMRegistry() view returns(address)
func (_PodManager *PodManagerCallerSession) BitDSMRegistry() (common.Address, error) {
	return _PodManager.Contract.BitDSMRegistry(&_PodManager.CallOpts)
}

// GetBitcoinDepositRequest is a free data retrieval call binding the contract method 0x85974473.
//
// Solidity: function getBitcoinDepositRequest(address pod) view returns((bytes32,uint256,bool))
func (_PodManager *PodManagerCaller) GetBitcoinDepositRequest(opts *bind.CallOpts, pod common.Address) (IBitcoinPodManagerBitcoinDepositRequest, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getBitcoinDepositRequest", pod)

	if err != nil {
		return *new(IBitcoinPodManagerBitcoinDepositRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IBitcoinPodManagerBitcoinDepositRequest)).(*IBitcoinPodManagerBitcoinDepositRequest)

	return out0, err

}

// GetBitcoinDepositRequest is a free data retrieval call binding the contract method 0x85974473.
//
// Solidity: function getBitcoinDepositRequest(address pod) view returns((bytes32,uint256,bool))
func (_PodManager *PodManagerSession) GetBitcoinDepositRequest(pod common.Address) (IBitcoinPodManagerBitcoinDepositRequest, error) {
	return _PodManager.Contract.GetBitcoinDepositRequest(&_PodManager.CallOpts, pod)
}

// GetBitcoinDepositRequest is a free data retrieval call binding the contract method 0x85974473.
//
// Solidity: function getBitcoinDepositRequest(address pod) view returns((bytes32,uint256,bool))
func (_PodManager *PodManagerCallerSession) GetBitcoinDepositRequest(pod common.Address) (IBitcoinPodManagerBitcoinDepositRequest, error) {
	return _PodManager.Contract.GetBitcoinDepositRequest(&_PodManager.CallOpts, pod)
}

// GetBitcoinWithdrawalAddress is a free data retrieval call binding the contract method 0xc07eea48.
//
// Solidity: function getBitcoinWithdrawalAddress(address pod) view returns(bytes)
func (_PodManager *PodManagerCaller) GetBitcoinWithdrawalAddress(opts *bind.CallOpts, pod common.Address) ([]byte, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "getBitcoinWithdrawalAddress", pod)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetBitcoinWithdrawalAddress is a free data retrieval call binding the contract method 0xc07eea48.
//
// Solidity: function getBitcoinWithdrawalAddress(address pod) view returns(bytes)
func (_PodManager *PodManagerSession) GetBitcoinWithdrawalAddress(pod common.Address) ([]byte, error) {
	return _PodManager.Contract.GetBitcoinWithdrawalAddress(&_PodManager.CallOpts, pod)
}

// GetBitcoinWithdrawalAddress is a free data retrieval call binding the contract method 0xc07eea48.
//
// Solidity: function getBitcoinWithdrawalAddress(address pod) view returns(bytes)
func (_PodManager *PodManagerCallerSession) GetBitcoinWithdrawalAddress(pod common.Address) ([]byte, error) {
	return _PodManager.Contract.GetBitcoinWithdrawalAddress(&_PodManager.CallOpts, pod)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PodManager *PodManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PodManager *PodManagerSession) Owner() (common.Address, error) {
	return _PodManager.Contract.Owner(&_PodManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PodManager *PodManagerCallerSession) Owner() (common.Address, error) {
	return _PodManager.Contract.Owner(&_PodManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PodManager *PodManagerCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PodManager *PodManagerSession) Paused() (bool, error) {
	return _PodManager.Contract.Paused(&_PodManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_PodManager *PodManagerCallerSession) Paused() (bool, error) {
	return _PodManager.Contract.Paused(&_PodManager.CallOpts)
}

// PodToApp is a free data retrieval call binding the contract method 0x547d0bba.
//
// Solidity: function podToApp(address ) view returns(address)
func (_PodManager *PodManagerCaller) PodToApp(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "podToApp", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PodToApp is a free data retrieval call binding the contract method 0x547d0bba.
//
// Solidity: function podToApp(address ) view returns(address)
func (_PodManager *PodManagerSession) PodToApp(arg0 common.Address) (common.Address, error) {
	return _PodManager.Contract.PodToApp(&_PodManager.CallOpts, arg0)
}

// PodToApp is a free data retrieval call binding the contract method 0x547d0bba.
//
// Solidity: function podToApp(address ) view returns(address)
func (_PodManager *PodManagerCallerSession) PodToApp(arg0 common.Address) (common.Address, error) {
	return _PodManager.Contract.PodToApp(&_PodManager.CallOpts, arg0)
}

// PodToBitcoinDepositRequest is a free data retrieval call binding the contract method 0x32d5f808.
//
// Solidity: function podToBitcoinDepositRequest(address ) view returns(bytes32 transactionId, uint256 amount, bool isPending)
func (_PodManager *PodManagerCaller) PodToBitcoinDepositRequest(opts *bind.CallOpts, arg0 common.Address) (struct {
	TransactionId [32]byte
	Amount        *big.Int
	IsPending     bool
}, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "podToBitcoinDepositRequest", arg0)

	outstruct := new(struct {
		TransactionId [32]byte
		Amount        *big.Int
		IsPending     bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.TransactionId = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.IsPending = *abi.ConvertType(out[2], new(bool)).(*bool)

	return *outstruct, err

}

// PodToBitcoinDepositRequest is a free data retrieval call binding the contract method 0x32d5f808.
//
// Solidity: function podToBitcoinDepositRequest(address ) view returns(bytes32 transactionId, uint256 amount, bool isPending)
func (_PodManager *PodManagerSession) PodToBitcoinDepositRequest(arg0 common.Address) (struct {
	TransactionId [32]byte
	Amount        *big.Int
	IsPending     bool
}, error) {
	return _PodManager.Contract.PodToBitcoinDepositRequest(&_PodManager.CallOpts, arg0)
}

// PodToBitcoinDepositRequest is a free data retrieval call binding the contract method 0x32d5f808.
//
// Solidity: function podToBitcoinDepositRequest(address ) view returns(bytes32 transactionId, uint256 amount, bool isPending)
func (_PodManager *PodManagerCallerSession) PodToBitcoinDepositRequest(arg0 common.Address) (struct {
	TransactionId [32]byte
	Amount        *big.Int
	IsPending     bool
}, error) {
	return _PodManager.Contract.PodToBitcoinDepositRequest(&_PodManager.CallOpts, arg0)
}

// PodToWithdrawalAddress is a free data retrieval call binding the contract method 0xbb64f765.
//
// Solidity: function podToWithdrawalAddress(address ) view returns(bytes)
func (_PodManager *PodManagerCaller) PodToWithdrawalAddress(opts *bind.CallOpts, arg0 common.Address) ([]byte, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "podToWithdrawalAddress", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// PodToWithdrawalAddress is a free data retrieval call binding the contract method 0xbb64f765.
//
// Solidity: function podToWithdrawalAddress(address ) view returns(bytes)
func (_PodManager *PodManagerSession) PodToWithdrawalAddress(arg0 common.Address) ([]byte, error) {
	return _PodManager.Contract.PodToWithdrawalAddress(&_PodManager.CallOpts, arg0)
}

// PodToWithdrawalAddress is a free data retrieval call binding the contract method 0xbb64f765.
//
// Solidity: function podToWithdrawalAddress(address ) view returns(bytes)
func (_PodManager *PodManagerCallerSession) PodToWithdrawalAddress(arg0 common.Address) ([]byte, error) {
	return _PodManager.Contract.PodToWithdrawalAddress(&_PodManager.CallOpts, arg0)
}

// UserToPod is a free data retrieval call binding the contract method 0x7b390bae.
//
// Solidity: function userToPod(address ) view returns(address)
func (_PodManager *PodManagerCaller) UserToPod(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _PodManager.contract.Call(opts, &out, "userToPod", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UserToPod is a free data retrieval call binding the contract method 0x7b390bae.
//
// Solidity: function userToPod(address ) view returns(address)
func (_PodManager *PodManagerSession) UserToPod(arg0 common.Address) (common.Address, error) {
	return _PodManager.Contract.UserToPod(&_PodManager.CallOpts, arg0)
}

// UserToPod is a free data retrieval call binding the contract method 0x7b390bae.
//
// Solidity: function userToPod(address ) view returns(address)
func (_PodManager *PodManagerCallerSession) UserToPod(arg0 common.Address) (common.Address, error) {
	return _PodManager.Contract.UserToPod(&_PodManager.CallOpts, arg0)
}

// ConfirmBitcoinDeposit is a paid mutator transaction binding the contract method 0x397ee69b.
//
// Solidity: function confirmBitcoinDeposit(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactor) ConfirmBitcoinDeposit(opts *bind.TransactOpts, pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "confirmBitcoinDeposit", pod, transactionId, amount)
}

// ConfirmBitcoinDeposit is a paid mutator transaction binding the contract method 0x397ee69b.
//
// Solidity: function confirmBitcoinDeposit(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerSession) ConfirmBitcoinDeposit(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.ConfirmBitcoinDeposit(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// ConfirmBitcoinDeposit is a paid mutator transaction binding the contract method 0x397ee69b.
//
// Solidity: function confirmBitcoinDeposit(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactorSession) ConfirmBitcoinDeposit(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.ConfirmBitcoinDeposit(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// CreatePod is a paid mutator transaction binding the contract method 0xfe64d401.
//
// Solidity: function createPod(address operator, bytes btcAddress) returns(address)
func (_PodManager *PodManagerTransactor) CreatePod(opts *bind.TransactOpts, operator common.Address, btcAddress []byte) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "createPod", operator, btcAddress)
}

// CreatePod is a paid mutator transaction binding the contract method 0xfe64d401.
//
// Solidity: function createPod(address operator, bytes btcAddress) returns(address)
func (_PodManager *PodManagerSession) CreatePod(operator common.Address, btcAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.CreatePod(&_PodManager.TransactOpts, operator, btcAddress)
}

// CreatePod is a paid mutator transaction binding the contract method 0xfe64d401.
//
// Solidity: function createPod(address operator, bytes btcAddress) returns(address)
func (_PodManager *PodManagerTransactorSession) CreatePod(operator common.Address, btcAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.CreatePod(&_PodManager.TransactOpts, operator, btcAddress)
}

// DelegatePod is a paid mutator transaction binding the contract method 0xf99b67c9.
//
// Solidity: function delegatePod(address pod, address appContract) returns()
func (_PodManager *PodManagerTransactor) DelegatePod(opts *bind.TransactOpts, pod common.Address, appContract common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "delegatePod", pod, appContract)
}

// DelegatePod is a paid mutator transaction binding the contract method 0xf99b67c9.
//
// Solidity: function delegatePod(address pod, address appContract) returns()
func (_PodManager *PodManagerSession) DelegatePod(pod common.Address, appContract common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.DelegatePod(&_PodManager.TransactOpts, pod, appContract)
}

// DelegatePod is a paid mutator transaction binding the contract method 0xf99b67c9.
//
// Solidity: function delegatePod(address pod, address appContract) returns()
func (_PodManager *PodManagerTransactorSession) DelegatePod(pod common.Address, appContract common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.DelegatePod(&_PodManager.TransactOpts, pod, appContract)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _appRegistry, address _bitDSMRegistry, address bitDSMServiceManager) returns()
func (_PodManager *PodManagerTransactor) Initialize(opts *bind.TransactOpts, _appRegistry common.Address, _bitDSMRegistry common.Address, bitDSMServiceManager common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "initialize", _appRegistry, _bitDSMRegistry, bitDSMServiceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _appRegistry, address _bitDSMRegistry, address bitDSMServiceManager) returns()
func (_PodManager *PodManagerSession) Initialize(_appRegistry common.Address, _bitDSMRegistry common.Address, bitDSMServiceManager common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.Initialize(&_PodManager.TransactOpts, _appRegistry, _bitDSMRegistry, bitDSMServiceManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _appRegistry, address _bitDSMRegistry, address bitDSMServiceManager) returns()
func (_PodManager *PodManagerTransactorSession) Initialize(_appRegistry common.Address, _bitDSMRegistry common.Address, bitDSMServiceManager common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.Initialize(&_PodManager.TransactOpts, _appRegistry, _bitDSMRegistry, bitDSMServiceManager)
}

// LockPod is a paid mutator transaction binding the contract method 0x221d3300.
//
// Solidity: function lockPod(address pod) returns()
func (_PodManager *PodManagerTransactor) LockPod(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "lockPod", pod)
}

// LockPod is a paid mutator transaction binding the contract method 0x221d3300.
//
// Solidity: function lockPod(address pod) returns()
func (_PodManager *PodManagerSession) LockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.LockPod(&_PodManager.TransactOpts, pod)
}

// LockPod is a paid mutator transaction binding the contract method 0x221d3300.
//
// Solidity: function lockPod(address pod) returns()
func (_PodManager *PodManagerTransactorSession) LockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.LockPod(&_PodManager.TransactOpts, pod)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PodManager *PodManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PodManager *PodManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _PodManager.Contract.RenounceOwnership(&_PodManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PodManager *PodManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PodManager.Contract.RenounceOwnership(&_PodManager.TransactOpts)
}

// SetSignedBitcoinWithdrawTransactionPod is a paid mutator transaction binding the contract method 0xd5062c77.
//
// Solidity: function setSignedBitcoinWithdrawTransactionPod(address pod, bytes signedBitcoinWithdrawTransaction) returns()
func (_PodManager *PodManagerTransactor) SetSignedBitcoinWithdrawTransactionPod(opts *bind.TransactOpts, pod common.Address, signedBitcoinWithdrawTransaction []byte) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "setSignedBitcoinWithdrawTransactionPod", pod, signedBitcoinWithdrawTransaction)
}

// SetSignedBitcoinWithdrawTransactionPod is a paid mutator transaction binding the contract method 0xd5062c77.
//
// Solidity: function setSignedBitcoinWithdrawTransactionPod(address pod, bytes signedBitcoinWithdrawTransaction) returns()
func (_PodManager *PodManagerSession) SetSignedBitcoinWithdrawTransactionPod(pod common.Address, signedBitcoinWithdrawTransaction []byte) (*types.Transaction, error) {
	return _PodManager.Contract.SetSignedBitcoinWithdrawTransactionPod(&_PodManager.TransactOpts, pod, signedBitcoinWithdrawTransaction)
}

// SetSignedBitcoinWithdrawTransactionPod is a paid mutator transaction binding the contract method 0xd5062c77.
//
// Solidity: function setSignedBitcoinWithdrawTransactionPod(address pod, bytes signedBitcoinWithdrawTransaction) returns()
func (_PodManager *PodManagerTransactorSession) SetSignedBitcoinWithdrawTransactionPod(pod common.Address, signedBitcoinWithdrawTransaction []byte) (*types.Transaction, error) {
	return _PodManager.Contract.SetSignedBitcoinWithdrawTransactionPod(&_PodManager.TransactOpts, pod, signedBitcoinWithdrawTransaction)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PodManager *PodManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PodManager *PodManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.TransferOwnership(&_PodManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PodManager *PodManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.TransferOwnership(&_PodManager.TransactOpts, newOwner)
}

// UndelegatePod is a paid mutator transaction binding the contract method 0xed1dfe0b.
//
// Solidity: function undelegatePod(address pod) returns()
func (_PodManager *PodManagerTransactor) UndelegatePod(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "undelegatePod", pod)
}

// UndelegatePod is a paid mutator transaction binding the contract method 0xed1dfe0b.
//
// Solidity: function undelegatePod(address pod) returns()
func (_PodManager *PodManagerSession) UndelegatePod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UndelegatePod(&_PodManager.TransactOpts, pod)
}

// UndelegatePod is a paid mutator transaction binding the contract method 0xed1dfe0b.
//
// Solidity: function undelegatePod(address pod) returns()
func (_PodManager *PodManagerTransactorSession) UndelegatePod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UndelegatePod(&_PodManager.TransactOpts, pod)
}

// UnlockPod is a paid mutator transaction binding the contract method 0x7de2970d.
//
// Solidity: function unlockPod(address pod) returns()
func (_PodManager *PodManagerTransactor) UnlockPod(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "unlockPod", pod)
}

// UnlockPod is a paid mutator transaction binding the contract method 0x7de2970d.
//
// Solidity: function unlockPod(address pod) returns()
func (_PodManager *PodManagerSession) UnlockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UnlockPod(&_PodManager.TransactOpts, pod)
}

// UnlockPod is a paid mutator transaction binding the contract method 0x7de2970d.
//
// Solidity: function unlockPod(address pod) returns()
func (_PodManager *PodManagerTransactorSession) UnlockPod(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.UnlockPod(&_PodManager.TransactOpts, pod)
}

// VerifyBitcoinDepositRequest is a paid mutator transaction binding the contract method 0x5b674bc9.
//
// Solidity: function verifyBitcoinDepositRequest(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactor) VerifyBitcoinDepositRequest(opts *bind.TransactOpts, pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "verifyBitcoinDepositRequest", pod, transactionId, amount)
}

// VerifyBitcoinDepositRequest is a paid mutator transaction binding the contract method 0x5b674bc9.
//
// Solidity: function verifyBitcoinDepositRequest(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerSession) VerifyBitcoinDepositRequest(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.VerifyBitcoinDepositRequest(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// VerifyBitcoinDepositRequest is a paid mutator transaction binding the contract method 0x5b674bc9.
//
// Solidity: function verifyBitcoinDepositRequest(address pod, bytes32 transactionId, uint256 amount) returns()
func (_PodManager *PodManagerTransactorSession) VerifyBitcoinDepositRequest(pod common.Address, transactionId [32]byte, amount *big.Int) (*types.Transaction, error) {
	return _PodManager.Contract.VerifyBitcoinDepositRequest(&_PodManager.TransactOpts, pod, transactionId, amount)
}

// WithdrawBitcoinAsTokens is a paid mutator transaction binding the contract method 0xd475ab03.
//
// Solidity: function withdrawBitcoinAsTokens(address pod) returns()
func (_PodManager *PodManagerTransactor) WithdrawBitcoinAsTokens(opts *bind.TransactOpts, pod common.Address) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "withdrawBitcoinAsTokens", pod)
}

// WithdrawBitcoinAsTokens is a paid mutator transaction binding the contract method 0xd475ab03.
//
// Solidity: function withdrawBitcoinAsTokens(address pod) returns()
func (_PodManager *PodManagerSession) WithdrawBitcoinAsTokens(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinAsTokens(&_PodManager.TransactOpts, pod)
}

// WithdrawBitcoinAsTokens is a paid mutator transaction binding the contract method 0xd475ab03.
//
// Solidity: function withdrawBitcoinAsTokens(address pod) returns()
func (_PodManager *PodManagerTransactorSession) WithdrawBitcoinAsTokens(pod common.Address) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinAsTokens(&_PodManager.TransactOpts, pod)
}

// WithdrawBitcoinCompleteTxRequest is a paid mutator transaction binding the contract method 0x564ba7a8.
//
// Solidity: function withdrawBitcoinCompleteTxRequest(address pod, bytes preSignedWithdrawTransaction, bytes withdrawAddress) returns()
func (_PodManager *PodManagerTransactor) WithdrawBitcoinCompleteTxRequest(opts *bind.TransactOpts, pod common.Address, preSignedWithdrawTransaction []byte, withdrawAddress []byte) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "withdrawBitcoinCompleteTxRequest", pod, preSignedWithdrawTransaction, withdrawAddress)
}

// WithdrawBitcoinCompleteTxRequest is a paid mutator transaction binding the contract method 0x564ba7a8.
//
// Solidity: function withdrawBitcoinCompleteTxRequest(address pod, bytes preSignedWithdrawTransaction, bytes withdrawAddress) returns()
func (_PodManager *PodManagerSession) WithdrawBitcoinCompleteTxRequest(pod common.Address, preSignedWithdrawTransaction []byte, withdrawAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinCompleteTxRequest(&_PodManager.TransactOpts, pod, preSignedWithdrawTransaction, withdrawAddress)
}

// WithdrawBitcoinCompleteTxRequest is a paid mutator transaction binding the contract method 0x564ba7a8.
//
// Solidity: function withdrawBitcoinCompleteTxRequest(address pod, bytes preSignedWithdrawTransaction, bytes withdrawAddress) returns()
func (_PodManager *PodManagerTransactorSession) WithdrawBitcoinCompleteTxRequest(pod common.Address, preSignedWithdrawTransaction []byte, withdrawAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinCompleteTxRequest(&_PodManager.TransactOpts, pod, preSignedWithdrawTransaction, withdrawAddress)
}

// WithdrawBitcoinPSBTRequest is a paid mutator transaction binding the contract method 0x8dc45e7a.
//
// Solidity: function withdrawBitcoinPSBTRequest(address pod, bytes withdrawAddress) returns()
func (_PodManager *PodManagerTransactor) WithdrawBitcoinPSBTRequest(opts *bind.TransactOpts, pod common.Address, withdrawAddress []byte) (*types.Transaction, error) {
	return _PodManager.contract.Transact(opts, "withdrawBitcoinPSBTRequest", pod, withdrawAddress)
}

// WithdrawBitcoinPSBTRequest is a paid mutator transaction binding the contract method 0x8dc45e7a.
//
// Solidity: function withdrawBitcoinPSBTRequest(address pod, bytes withdrawAddress) returns()
func (_PodManager *PodManagerSession) WithdrawBitcoinPSBTRequest(pod common.Address, withdrawAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinPSBTRequest(&_PodManager.TransactOpts, pod, withdrawAddress)
}

// WithdrawBitcoinPSBTRequest is a paid mutator transaction binding the contract method 0x8dc45e7a.
//
// Solidity: function withdrawBitcoinPSBTRequest(address pod, bytes withdrawAddress) returns()
func (_PodManager *PodManagerTransactorSession) WithdrawBitcoinPSBTRequest(pod common.Address, withdrawAddress []byte) (*types.Transaction, error) {
	return _PodManager.Contract.WithdrawBitcoinPSBTRequest(&_PodManager.TransactOpts, pod, withdrawAddress)
}

// PodManagerBitcoinBurnedIterator is returned from FilterBitcoinBurned and is used to iterate over the raw logs and unpacked data for BitcoinBurned events raised by the PodManager contract.
type PodManagerBitcoinBurnedIterator struct {
	Event *PodManagerBitcoinBurned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinBurnedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinBurned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinBurned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinBurnedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinBurnedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinBurned represents a BitcoinBurned event raised by the PodManager contract.
type PodManagerBitcoinBurned struct {
	Pod    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBitcoinBurned is a free log retrieval operation binding the contract event 0xab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d.
//
// Solidity: event BitcoinBurned(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) FilterBitcoinBurned(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinBurnedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinBurned", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinBurnedIterator{contract: _PodManager.contract, event: "BitcoinBurned", logs: logs, sub: sub}, nil
}

// WatchBitcoinBurned is a free log subscription operation binding the contract event 0xab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d.
//
// Solidity: event BitcoinBurned(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) WatchBitcoinBurned(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinBurned, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinBurned", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinBurned)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinBurned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinBurned is a log parse operation binding the contract event 0xab3f63d5d40e3fa7b8c0bece27a98227873fd63e10d0da6e8fcefc6e510d3f1d.
//
// Solidity: event BitcoinBurned(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) ParseBitcoinBurned(log types.Log) (*PodManagerBitcoinBurned, error) {
	event := new(PodManagerBitcoinBurned)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinBurned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinDepositConfirmedIterator is returned from FilterBitcoinDepositConfirmed and is used to iterate over the raw logs and unpacked data for BitcoinDepositConfirmed events raised by the PodManager contract.
type PodManagerBitcoinDepositConfirmedIterator struct {
	Event *PodManagerBitcoinDepositConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinDepositConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinDepositConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinDepositConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinDepositConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinDepositConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinDepositConfirmed represents a BitcoinDepositConfirmed event raised by the PodManager contract.
type PodManagerBitcoinDepositConfirmed struct {
	Pod    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBitcoinDepositConfirmed is a free log retrieval operation binding the contract event 0xcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef.
//
// Solidity: event BitcoinDepositConfirmed(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) FilterBitcoinDepositConfirmed(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinDepositConfirmedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinDepositConfirmed", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinDepositConfirmedIterator{contract: _PodManager.contract, event: "BitcoinDepositConfirmed", logs: logs, sub: sub}, nil
}

// WatchBitcoinDepositConfirmed is a free log subscription operation binding the contract event 0xcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef.
//
// Solidity: event BitcoinDepositConfirmed(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) WatchBitcoinDepositConfirmed(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinDepositConfirmed, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinDepositConfirmed", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinDepositConfirmed)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinDepositConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinDepositConfirmed is a log parse operation binding the contract event 0xcd774d9acd3dba4b6906137578fb72af62a91a12e8943e076232cb691cc96cef.
//
// Solidity: event BitcoinDepositConfirmed(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) ParseBitcoinDepositConfirmed(log types.Log) (*PodManagerBitcoinDepositConfirmed, error) {
	event := new(PodManagerBitcoinDepositConfirmed)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinDepositConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinMintedIterator is returned from FilterBitcoinMinted and is used to iterate over the raw logs and unpacked data for BitcoinMinted events raised by the PodManager contract.
type PodManagerBitcoinMintedIterator struct {
	Event *PodManagerBitcoinMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinMinted represents a BitcoinMinted event raised by the PodManager contract.
type PodManagerBitcoinMinted struct {
	Pod    common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBitcoinMinted is a free log retrieval operation binding the contract event 0x5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd3.
//
// Solidity: event BitcoinMinted(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) FilterBitcoinMinted(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinMintedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinMinted", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinMintedIterator{contract: _PodManager.contract, event: "BitcoinMinted", logs: logs, sub: sub}, nil
}

// WatchBitcoinMinted is a free log subscription operation binding the contract event 0x5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd3.
//
// Solidity: event BitcoinMinted(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) WatchBitcoinMinted(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinMinted, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinMinted", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinMinted)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinMinted is a log parse operation binding the contract event 0x5aca106588d0e1ebb9128b3f4b196bc949a208e38d3db913363353402fe73bd3.
//
// Solidity: event BitcoinMinted(address indexed pod, uint256 amount)
func (_PodManager *PodManagerFilterer) ParseBitcoinMinted(log types.Log) (*PodManagerBitcoinMinted, error) {
	event := new(PodManagerBitcoinMinted)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinWithdrawalCompleteTxRequestIterator is returned from FilterBitcoinWithdrawalCompleteTxRequest and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawalCompleteTxRequest events raised by the PodManager contract.
type PodManagerBitcoinWithdrawalCompleteTxRequestIterator struct {
	Event *PodManagerBitcoinWithdrawalCompleteTxRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinWithdrawalCompleteTxRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinWithdrawalCompleteTxRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinWithdrawalCompleteTxRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinWithdrawalCompleteTxRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinWithdrawalCompleteTxRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinWithdrawalCompleteTxRequest represents a BitcoinWithdrawalCompleteTxRequest event raised by the PodManager contract.
type PodManagerBitcoinWithdrawalCompleteTxRequest struct {
	Pod                common.Address
	Operator           common.Address
	PreSignedBitcoinTx []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawalCompleteTxRequest is a free log retrieval operation binding the contract event 0xef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f6.
//
// Solidity: event BitcoinWithdrawalCompleteTxRequest(address indexed pod, address indexed operator, bytes preSignedBitcoinTx)
func (_PodManager *PodManagerFilterer) FilterBitcoinWithdrawalCompleteTxRequest(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*PodManagerBitcoinWithdrawalCompleteTxRequestIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinWithdrawalCompleteTxRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinWithdrawalCompleteTxRequestIterator{contract: _PodManager.contract, event: "BitcoinWithdrawalCompleteTxRequest", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawalCompleteTxRequest is a free log subscription operation binding the contract event 0xef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f6.
//
// Solidity: event BitcoinWithdrawalCompleteTxRequest(address indexed pod, address indexed operator, bytes preSignedBitcoinTx)
func (_PodManager *PodManagerFilterer) WatchBitcoinWithdrawalCompleteTxRequest(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinWithdrawalCompleteTxRequest, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinWithdrawalCompleteTxRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinWithdrawalCompleteTxRequest)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalCompleteTxRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawalCompleteTxRequest is a log parse operation binding the contract event 0xef73d097c5517b2b5d2dbffb17b0f948b5d7606055610ed1cad57aaa439e94f6.
//
// Solidity: event BitcoinWithdrawalCompleteTxRequest(address indexed pod, address indexed operator, bytes preSignedBitcoinTx)
func (_PodManager *PodManagerFilterer) ParseBitcoinWithdrawalCompleteTxRequest(log types.Log) (*PodManagerBitcoinWithdrawalCompleteTxRequest, error) {
	event := new(PodManagerBitcoinWithdrawalCompleteTxRequest)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalCompleteTxRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinWithdrawalPSBTRequestIterator is returned from FilterBitcoinWithdrawalPSBTRequest and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawalPSBTRequest events raised by the PodManager contract.
type PodManagerBitcoinWithdrawalPSBTRequestIterator struct {
	Event *PodManagerBitcoinWithdrawalPSBTRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinWithdrawalPSBTRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinWithdrawalPSBTRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinWithdrawalPSBTRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinWithdrawalPSBTRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinWithdrawalPSBTRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinWithdrawalPSBTRequest represents a BitcoinWithdrawalPSBTRequest event raised by the PodManager contract.
type PodManagerBitcoinWithdrawalPSBTRequest struct {
	Pod             common.Address
	Operator        common.Address
	WithdrawAddress []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawalPSBTRequest is a free log retrieval operation binding the contract event 0xe23f5e191fba9e1a998780fccbaac7b46f1566a2203fbb663852dcbc1cf15c12.
//
// Solidity: event BitcoinWithdrawalPSBTRequest(address indexed pod, address indexed operator, bytes withdrawAddress)
func (_PodManager *PodManagerFilterer) FilterBitcoinWithdrawalPSBTRequest(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*PodManagerBitcoinWithdrawalPSBTRequestIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinWithdrawalPSBTRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinWithdrawalPSBTRequestIterator{contract: _PodManager.contract, event: "BitcoinWithdrawalPSBTRequest", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawalPSBTRequest is a free log subscription operation binding the contract event 0xe23f5e191fba9e1a998780fccbaac7b46f1566a2203fbb663852dcbc1cf15c12.
//
// Solidity: event BitcoinWithdrawalPSBTRequest(address indexed pod, address indexed operator, bytes withdrawAddress)
func (_PodManager *PodManagerFilterer) WatchBitcoinWithdrawalPSBTRequest(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinWithdrawalPSBTRequest, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinWithdrawalPSBTRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinWithdrawalPSBTRequest)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalPSBTRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawalPSBTRequest is a log parse operation binding the contract event 0xe23f5e191fba9e1a998780fccbaac7b46f1566a2203fbb663852dcbc1cf15c12.
//
// Solidity: event BitcoinWithdrawalPSBTRequest(address indexed pod, address indexed operator, bytes withdrawAddress)
func (_PodManager *PodManagerFilterer) ParseBitcoinWithdrawalPSBTRequest(log types.Log) (*PodManagerBitcoinWithdrawalPSBTRequest, error) {
	event := new(PodManagerBitcoinWithdrawalPSBTRequest)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawalPSBTRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerBitcoinWithdrawnFromPodIterator is returned from FilterBitcoinWithdrawnFromPod and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawnFromPod events raised by the PodManager contract.
type PodManagerBitcoinWithdrawnFromPodIterator struct {
	Event *PodManagerBitcoinWithdrawnFromPod // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerBitcoinWithdrawnFromPodIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerBitcoinWithdrawnFromPod)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerBitcoinWithdrawnFromPod)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerBitcoinWithdrawnFromPodIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerBitcoinWithdrawnFromPodIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerBitcoinWithdrawnFromPod represents a BitcoinWithdrawnFromPod event raised by the PodManager contract.
type PodManagerBitcoinWithdrawnFromPod struct {
	Pod             common.Address
	WithdrawAddress []byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawnFromPod is a free log retrieval operation binding the contract event 0x72251995fbf4afbeb2ff2e8d45b74824865f5d1698cc4177299493df9d1372f2.
//
// Solidity: event BitcoinWithdrawnFromPod(address indexed pod, bytes withdrawAddress)
func (_PodManager *PodManagerFilterer) FilterBitcoinWithdrawnFromPod(opts *bind.FilterOpts, pod []common.Address) (*PodManagerBitcoinWithdrawnFromPodIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "BitcoinWithdrawnFromPod", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerBitcoinWithdrawnFromPodIterator{contract: _PodManager.contract, event: "BitcoinWithdrawnFromPod", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawnFromPod is a free log subscription operation binding the contract event 0x72251995fbf4afbeb2ff2e8d45b74824865f5d1698cc4177299493df9d1372f2.
//
// Solidity: event BitcoinWithdrawnFromPod(address indexed pod, bytes withdrawAddress)
func (_PodManager *PodManagerFilterer) WatchBitcoinWithdrawnFromPod(opts *bind.WatchOpts, sink chan<- *PodManagerBitcoinWithdrawnFromPod, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "BitcoinWithdrawnFromPod", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerBitcoinWithdrawnFromPod)
				if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawnFromPod", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawnFromPod is a log parse operation binding the contract event 0x72251995fbf4afbeb2ff2e8d45b74824865f5d1698cc4177299493df9d1372f2.
//
// Solidity: event BitcoinWithdrawnFromPod(address indexed pod, bytes withdrawAddress)
func (_PodManager *PodManagerFilterer) ParseBitcoinWithdrawnFromPod(log types.Log) (*PodManagerBitcoinWithdrawnFromPod, error) {
	event := new(PodManagerBitcoinWithdrawnFromPod)
	if err := _PodManager.contract.UnpackLog(event, "BitcoinWithdrawnFromPod", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the PodManager contract.
type PodManagerInitializedIterator struct {
	Event *PodManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerInitialized represents a Initialized event raised by the PodManager contract.
type PodManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PodManager *PodManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*PodManagerInitializedIterator, error) {

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &PodManagerInitializedIterator{contract: _PodManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PodManager *PodManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *PodManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerInitialized)
				if err := _PodManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_PodManager *PodManagerFilterer) ParseInitialized(log types.Log) (*PodManagerInitialized, error) {
	event := new(PodManagerInitialized)
	if err := _PodManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PodManager contract.
type PodManagerOwnershipTransferredIterator struct {
	Event *PodManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerOwnershipTransferred represents a OwnershipTransferred event raised by the PodManager contract.
type PodManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PodManager *PodManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PodManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerOwnershipTransferredIterator{contract: _PodManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PodManager *PodManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PodManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerOwnershipTransferred)
				if err := _PodManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PodManager *PodManagerFilterer) ParseOwnershipTransferred(log types.Log) (*PodManagerOwnershipTransferred, error) {
	event := new(PodManagerOwnershipTransferred)
	if err := _PodManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the PodManager contract.
type PodManagerPausedIterator struct {
	Event *PodManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPaused represents a Paused event raised by the PodManager contract.
type PodManagerPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PodManager *PodManagerFilterer) FilterPaused(opts *bind.FilterOpts) (*PodManagerPausedIterator, error) {

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &PodManagerPausedIterator{contract: _PodManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PodManager *PodManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *PodManagerPaused) (event.Subscription, error) {

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPaused)
				if err := _PodManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_PodManager *PodManagerFilterer) ParsePaused(log types.Log) (*PodManagerPaused, error) {
	event := new(PodManagerPaused)
	if err := _PodManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPodCreatedIterator is returned from FilterPodCreated and is used to iterate over the raw logs and unpacked data for PodCreated events raised by the PodManager contract.
type PodManagerPodCreatedIterator struct {
	Event *PodManagerPodCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPodCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPodCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPodCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPodCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPodCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPodCreated represents a PodCreated event raised by the PodManager contract.
type PodManagerPodCreated struct {
	User     common.Address
	Pod      common.Address
	Operator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPodCreated is a free log retrieval operation binding the contract event 0x9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef9.
//
// Solidity: event PodCreated(address indexed user, address indexed pod, address indexed operator)
func (_PodManager *PodManagerFilterer) FilterPodCreated(opts *bind.FilterOpts, user []common.Address, pod []common.Address, operator []common.Address) (*PodManagerPodCreatedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "PodCreated", userRule, podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerPodCreatedIterator{contract: _PodManager.contract, event: "PodCreated", logs: logs, sub: sub}, nil
}

// WatchPodCreated is a free log subscription operation binding the contract event 0x9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef9.
//
// Solidity: event PodCreated(address indexed user, address indexed pod, address indexed operator)
func (_PodManager *PodManagerFilterer) WatchPodCreated(opts *bind.WatchOpts, sink chan<- *PodManagerPodCreated, user []common.Address, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "PodCreated", userRule, podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPodCreated)
				if err := _PodManager.contract.UnpackLog(event, "PodCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePodCreated is a log parse operation binding the contract event 0x9bec3cb55fcd181aaece51ed577f8a95b847c8af90535a81a7fa7d1c20138ef9.
//
// Solidity: event PodCreated(address indexed user, address indexed pod, address indexed operator)
func (_PodManager *PodManagerFilterer) ParsePodCreated(log types.Log) (*PodManagerPodCreated, error) {
	event := new(PodManagerPodCreated)
	if err := _PodManager.contract.UnpackLog(event, "PodCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPodDelegatedIterator is returned from FilterPodDelegated and is used to iterate over the raw logs and unpacked data for PodDelegated events raised by the PodManager contract.
type PodManagerPodDelegatedIterator struct {
	Event *PodManagerPodDelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPodDelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPodDelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPodDelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPodDelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPodDelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPodDelegated represents a PodDelegated event raised by the PodManager contract.
type PodManagerPodDelegated struct {
	Pod         common.Address
	AppContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterPodDelegated is a free log retrieval operation binding the contract event 0xef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d.
//
// Solidity: event PodDelegated(address indexed pod, address indexed appContract)
func (_PodManager *PodManagerFilterer) FilterPodDelegated(opts *bind.FilterOpts, pod []common.Address, appContract []common.Address) (*PodManagerPodDelegatedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var appContractRule []interface{}
	for _, appContractItem := range appContract {
		appContractRule = append(appContractRule, appContractItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "PodDelegated", podRule, appContractRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerPodDelegatedIterator{contract: _PodManager.contract, event: "PodDelegated", logs: logs, sub: sub}, nil
}

// WatchPodDelegated is a free log subscription operation binding the contract event 0xef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d.
//
// Solidity: event PodDelegated(address indexed pod, address indexed appContract)
func (_PodManager *PodManagerFilterer) WatchPodDelegated(opts *bind.WatchOpts, sink chan<- *PodManagerPodDelegated, pod []common.Address, appContract []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var appContractRule []interface{}
	for _, appContractItem := range appContract {
		appContractRule = append(appContractRule, appContractItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "PodDelegated", podRule, appContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPodDelegated)
				if err := _PodManager.contract.UnpackLog(event, "PodDelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePodDelegated is a log parse operation binding the contract event 0xef32074b263175118a4614cc3e2742c50b70facbf865c0c26da767dd095e167d.
//
// Solidity: event PodDelegated(address indexed pod, address indexed appContract)
func (_PodManager *PodManagerFilterer) ParsePodDelegated(log types.Log) (*PodManagerPodDelegated, error) {
	event := new(PodManagerPodDelegated)
	if err := _PodManager.contract.UnpackLog(event, "PodDelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerPodUndelegatedIterator is returned from FilterPodUndelegated and is used to iterate over the raw logs and unpacked data for PodUndelegated events raised by the PodManager contract.
type PodManagerPodUndelegatedIterator struct {
	Event *PodManagerPodUndelegated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerPodUndelegatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerPodUndelegated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerPodUndelegated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerPodUndelegatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerPodUndelegatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerPodUndelegated represents a PodUndelegated event raised by the PodManager contract.
type PodManagerPodUndelegated struct {
	Pod common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPodUndelegated is a free log retrieval operation binding the contract event 0xfde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a.
//
// Solidity: event PodUndelegated(address indexed pod)
func (_PodManager *PodManagerFilterer) FilterPodUndelegated(opts *bind.FilterOpts, pod []common.Address) (*PodManagerPodUndelegatedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "PodUndelegated", podRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerPodUndelegatedIterator{contract: _PodManager.contract, event: "PodUndelegated", logs: logs, sub: sub}, nil
}

// WatchPodUndelegated is a free log subscription operation binding the contract event 0xfde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a.
//
// Solidity: event PodUndelegated(address indexed pod)
func (_PodManager *PodManagerFilterer) WatchPodUndelegated(opts *bind.WatchOpts, sink chan<- *PodManagerPodUndelegated, pod []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "PodUndelegated", podRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerPodUndelegated)
				if err := _PodManager.contract.UnpackLog(event, "PodUndelegated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePodUndelegated is a log parse operation binding the contract event 0xfde114ec59a374c36954512dafbedfd68f4c4d137190476a76cddccd24697a3a.
//
// Solidity: event PodUndelegated(address indexed pod)
func (_PodManager *PodManagerFilterer) ParsePodUndelegated(log types.Log) (*PodManagerPodUndelegated, error) {
	event := new(PodManagerPodUndelegated)
	if err := _PodManager.contract.UnpackLog(event, "PodUndelegated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the PodManager contract.
type PodManagerUnpausedIterator struct {
	Event *PodManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerUnpaused represents a Unpaused event raised by the PodManager contract.
type PodManagerUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PodManager *PodManagerFilterer) FilterUnpaused(opts *bind.FilterOpts) (*PodManagerUnpausedIterator, error) {

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &PodManagerUnpausedIterator{contract: _PodManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PodManager *PodManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *PodManagerUnpaused) (event.Subscription, error) {

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerUnpaused)
				if err := _PodManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_PodManager *PodManagerFilterer) ParseUnpaused(log types.Log) (*PodManagerUnpaused, error) {
	event := new(PodManagerUnpaused)
	if err := _PodManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PodManagerVerifyBitcoinDepositRequestIterator is returned from FilterVerifyBitcoinDepositRequest and is used to iterate over the raw logs and unpacked data for VerifyBitcoinDepositRequest events raised by the PodManager contract.
type PodManagerVerifyBitcoinDepositRequestIterator struct {
	Event *PodManagerVerifyBitcoinDepositRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PodManagerVerifyBitcoinDepositRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PodManagerVerifyBitcoinDepositRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PodManagerVerifyBitcoinDepositRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PodManagerVerifyBitcoinDepositRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PodManagerVerifyBitcoinDepositRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PodManagerVerifyBitcoinDepositRequest represents a VerifyBitcoinDepositRequest event raised by the PodManager contract.
type PodManagerVerifyBitcoinDepositRequest struct {
	Pod                   common.Address
	Operator              common.Address
	BitcoinDepositRequest IBitcoinPodManagerBitcoinDepositRequest
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterVerifyBitcoinDepositRequest is a free log retrieval operation binding the contract event 0x19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e.
//
// Solidity: event VerifyBitcoinDepositRequest(address indexed pod, address indexed operator, (bytes32,uint256,bool) bitcoinDepositRequest)
func (_PodManager *PodManagerFilterer) FilterVerifyBitcoinDepositRequest(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*PodManagerVerifyBitcoinDepositRequestIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.FilterLogs(opts, "VerifyBitcoinDepositRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &PodManagerVerifyBitcoinDepositRequestIterator{contract: _PodManager.contract, event: "VerifyBitcoinDepositRequest", logs: logs, sub: sub}, nil
}

// WatchVerifyBitcoinDepositRequest is a free log subscription operation binding the contract event 0x19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e.
//
// Solidity: event VerifyBitcoinDepositRequest(address indexed pod, address indexed operator, (bytes32,uint256,bool) bitcoinDepositRequest)
func (_PodManager *PodManagerFilterer) WatchVerifyBitcoinDepositRequest(opts *bind.WatchOpts, sink chan<- *PodManagerVerifyBitcoinDepositRequest, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _PodManager.contract.WatchLogs(opts, "VerifyBitcoinDepositRequest", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PodManagerVerifyBitcoinDepositRequest)
				if err := _PodManager.contract.UnpackLog(event, "VerifyBitcoinDepositRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifyBitcoinDepositRequest is a log parse operation binding the contract event 0x19e46e0ef253a265a935e867bddd4047e0ea6700a3b5254cc16dea197da7595e.
//
// Solidity: event VerifyBitcoinDepositRequest(address indexed pod, address indexed operator, (bytes32,uint256,bool) bitcoinDepositRequest)
func (_PodManager *PodManagerFilterer) ParseVerifyBitcoinDepositRequest(log types.Log) (*PodManagerVerifyBitcoinDepositRequest, error) {
	event := new(PodManagerVerifyBitcoinDepositRequest)
	if err := _PodManager.contract.UnpackLog(event, "VerifyBitcoinDepositRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
