// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package BitDSMServiceManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IRewardsCoordinatorRewardsSubmission is an auto generated low-level Go binding around an user-defined struct.
type IRewardsCoordinatorRewardsSubmission struct {
	StrategiesAndMultipliers []IRewardsCoordinatorStrategyAndMultiplier
	Token                    common.Address
	Amount                   *big.Int
	StartTimestamp           uint32
	Duration                 uint32
}

// IRewardsCoordinatorStrategyAndMultiplier is an auto generated low-level Go binding around an user-defined struct.
type IRewardsCoordinatorStrategyAndMultiplier struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ISignatureUtilsSignatureWithSaltAndExpiry is an auto generated low-level Go binding around an user-defined struct.
type ISignatureUtilsSignatureWithSaltAndExpiry struct {
	Signature []byte
	Salt      [32]byte
	Expiry    *big.Int
}

// BitDSMServiceManagerMetaData contains all meta data concerning the BitDSMServiceManager contract.
var BitDSMServiceManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_avsDirectory\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_bitDSMRegistry\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsCoordinator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"avsDirectory\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"confirmDeposit\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"confirmWithdrawal\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"transaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"createAVSRewardsSubmission\",\"inputs\":[{\"name\":\"rewardsSubmissions\",\"type\":\"tuple[]\",\"internalType\":\"structIRewardsCoordinator.RewardsSubmission[]\",\"components\":[{\"name\":\"strategiesAndMultipliers\",\"type\":\"tuple[]\",\"internalType\":\"structIRewardsCoordinator.StrategyAndMultiplier[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"startTimestamp\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"duration\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deregisterOperatorFromAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getOperatorRestakedStrategies\",\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRestakeableStrategies\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_rewardsInitiator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"bitcoinPodManager\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerOperatorToAVS\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorSignature\",\"type\":\"tuple\",\"internalType\":\"structISignatureUtils.SignatureWithSaltAndExpiry\",\"components\":[{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"rewardsInitiator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"setBitcoinPodManager\",\"inputs\":[{\"name\":\"bitcoinPodManager\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setRewardsInitiator\",\"inputs\":[{\"name\":\"newRewardsInitiator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateAVSMetadataURI\",\"inputs\":[{\"name\":\"_metadataURI\",\"type\":\"string\",\"internalType\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifyBTCAddress\",\"inputs\":[{\"name\":\"btcAddress\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"script\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinCompleteTx\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"completeTx\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawBitcoinPSBT\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"psbtTransaction\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"BTCAddressVerified\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"btcAddress\",\"type\":\"string\",\"indexed\":false,\"internalType\":\"string\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"BitcoinWithdrawalTransactionSigned\",\"inputs\":[{\"name\":\"pod\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RewardsInitiatorUpdated\",\"inputs\":[{\"name\":\"prevRewardsInitiator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"newRewardsInitiator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x608060405234801561000f575f80fd5b5060043610610127575f3560e01c80638da5cb5b116100a9578063c0c53b8b1161006e578063c0c53b8b146102b0578063e481af9d146102c3578063f2fde38b146102cb578063fc299dee146102de578063fce36c7d146102f1575f80fd5b80638da5cb5b146102535780639926ee7d14610264578063a364f4da14610277578063a7d239b11461028a578063a98fb3551461029d575f80fd5b806368304835116100ef57806368304835146101a25780636b3aa72e146101e1578063715018a6146102085780637b61554114610210578063818001a114610223575f80fd5b806333cfb7b71461012b57806334c9b14e146101545780633b1a4e44146101695780633b7d82ef1461017c5780633bc28c8c1461018f575b5f80fd5b61013e610139366004612565565b610304565b60405161014b9190612587565b60405180910390f35b610167610162366004612610565b610315565b005b610167610177366004612660565b6105e2565b61016761018a366004612660565b610974565b61016761019d366004612565565b610a8e565b6101c97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161014b565b6101c97f000000000000000000000000000000000000000000000000000000000000000081565b610167610aa2565b61016761021e3660046126e5565b610ab5565b610167610231366004612565565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03166101c9565b610167610272366004612872565b610def565b610167610285366004612565565b610e45565b610167610298366004612916565b610e96565b6101676102ab36600461297c565b6112fa565b6101676102be3660046129c0565b61130b565b61013e611436565b6101676102d9366004612565565b611445565b6065546101c9906001600160a01b031681565b6101676102ff366004612a08565b6114bb565b606061030f826114cd565b92915050565b336001600160a01b0316836001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa15801561035b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061037f9190612a76565b6001600160a01b0316146103f65760405162461bcd60e51b815260206004820152603360248201527f4f6e6c79206f70657261746f722074686174206f776e732074686520706f642060448201527218d85b8818dbdb999a5c9b4819195c1bdcda5d606a1b60648201526084015b60405180910390fd5b609754604051638597447360e01b81526001600160a01b0385811660048301525f921690638597447390602401606060405180830381865afa15801561043e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104629190612aa5565b6020818101518251604080516bffffffffffffffffffffffff1960608b811b82168388015233901b16603482015260488101939093526068830191909152600160f81b6088830152805180830360690181526089909201905280519101209091505f6104cd826117e6565b90505f61050f8287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061183892505050565b90506001600160a01b03811633146105695760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204f70657261746f72207369676e617475726500000000000060448201526064016103ed565b6097548451602086015160405163397ee69b60e01b81526001600160a01b038b811660048301526024820193909352604481019190915291169063397ee69b906064015f604051808303815f87803b1580156105c3575f80fd5b505af11580156105d5573d5f803e3d5ffd5b5050505050505050505050565b336001600160a01b0316866001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015610628573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061064c9190612a76565b6001600160a01b0316146106725760405162461bcd60e51b81526004016103ed90612ae3565b60975460405163180fdd4960e31b81526001600160a01b0388811660048301529091169063c07eea48906024015f60405180830381865afa1580156106b9573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526106e09190810190612b6f565b51156107385760405162461bcd60e51b815260206004820152602160248201527f5769746864726177616c207265717565737420616c72656164792065786973746044820152607360f81b60648201526084016103ed565b60975460405163180fdd4960e31b81526001600160a01b0388811660048301525f92169063c07eea48906024015f60405180830381865afa15801561077f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107a69190810190612b6f565b90506107b48585838961185a565b6107ef5760405162461bcd60e51b815260206004820152600c60248201526b125b9d985b1a59081414d09560a21b60448201526064016103ed565b5f8787878785604051602001610809959493929190612bca565b6040516020818303038152906040528051906020012090505f61082b826117e6565b90505f61086d8287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061183892505050565b90506001600160a01b03811633146108c75760405162461bcd60e51b815260206004820152601a60248201527f496e76616c6964204f70657261746f72207369676e617475726500000000000060448201526064016103ed565b60975460405163d5062c7760e01b81526001600160a01b039091169063d5062c77906108fb908d908c908c90600401612c2f565b5f604051808303815f87803b158015610912575f80fd5b505af1158015610924573d5f803e3d5ffd5b50506040518b81523392506001600160a01b038d1691507fce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc79060200160405180910390a350505050505050505050565b336001600160a01b0316866001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ba573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109de9190612a76565b6001600160a01b031614610a045760405162461bcd60e51b81526004016103ed90612ae3565b60975460405163180fdd4960e31b81526001600160a01b0388811660048301525f92169063c07eea48906024015f60405180830381865afa158015610a4b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a729190810190612b6f565b90505f8787878785604051602001610809959493929190612bca565b610a966119dd565b610a9f81611a37565b50565b610aaa6119dd565b610ab35f611aa0565b565b336001600160a01b0316856001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b1f9190612a76565b6001600160a01b031614610b945760405162461bcd60e51b815260206004820152603660248201527f4f6e6c79206f70657261746f722074686174206f776e732074686520706f642060448201527518d85b8818dbdb999a5c9b481dda5d1a191c985dd85b60521b60648201526084016103ed565b60975460405163180fdd4960e31b81526001600160a01b0387811660048301525f92169063c07eea48906024015f60405180830381865afa158015610bdb573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610c029190810190612b6f565b5111610c505760405162461bcd60e51b815260206004820181905260248201527f4e6f207769746864726177616c207265717565737420746f20636f6e6669726d60448201526064016103ed565b60975460405163180fdd4960e31b81526001600160a01b0387811660048301525f92169063c07eea48906024015f60405180830381865afa158015610c97573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610cbe9190810190612b6f565b90505f86868684604051602001610cd89493929190612c5c565b6040516020818303038152906040528051906020012090505f610cfa826117e6565b90505f610d3c8287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061183892505050565b90506001600160a01b0381163314610d8a5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064016103ed565b60975460405163d475ab0360e01b81526001600160a01b038b811660048301529091169063d475ab03906024015f604051808303815f87803b158015610dce575f80fd5b505af1158015610de0573d5f803e3d5ffd5b50505050505050505050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e375760405162461bcd60e51b81526004016103ed90612c92565b610e418282611af1565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e8d5760405162461bcd60e51b81526004016103ed90612c92565b610a9f81611b70565b60405163ec7fbb3160e01b81523360048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ec7fbb3190602401602060405180830381865afa158015610efb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f1f9190612d02565b610f6b5760405162461bcd60e51b815260206004820152601b60248201527f4f70657261746f72206d7573742062652072656769737465726564000000000060448201526064016103ed565b5f8073__$ad319d1e12868f1c821b7f18b1142a0745$__63c45d53c486866040518363ffffffff1660e01b8152600401610fa6929190612d1b565b5f60405180830381865af4158015610fc0573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610fe79190810190612d4c565b9150915080516021146110535760405162461bcd60e51b815260206004820152602e60248201527f496e76616c69642075736572206b6579206c656e6774682e2049742073686f7560448201526d6c6420626520333320627974657360901b60648201526084016103ed565b6040516339c2182760e01b81523360048201526110e69083906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339c21827906024015f60405180830381865afa1580156110ba573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526110e19190810190612dab565b611bea565b6111325760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206f70657261746f7220425443206b6579000000000000000060448201526064016103ed565b604051638fc583c160e01b81525f9073__$ad319d1e12868f1c821b7f18b1142a0745$__90638fc583c19061116d9089908990600401612d1b565b5f60405180830381865af4158015611187573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526111ae9190810190612dab565b90505f73__$ad319d1e12868f1c821b7f18b1142a0745$__63b7b8346d836040518263ffffffff1660e01b81526004016111e89190612e0a565b5f60405180830381865af4158015611202573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526112299190810190612b6f565b905061126a818a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611bea92505050565b6112ac5760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420425443206164647265737360681b60448201526064016103ed565b336001600160a01b03167fabc3bc0a50a83331466b147d3ce6d2a71cc52bfa15d52467b4860bb8d08c206b8a8a6040516112e7929190612d1b565b60405180910390a2505050505050505050565b6113026119dd565b610a9f81611c6e565b5f54610100900460ff161580801561132957505f54600160ff909116105b806113425750303b15801561134257505f5460ff166001145b6113a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103ed565b5f805460ff1916600117905580156113c6575f805461ff0019166101001790555b6113d08484611cba565b609780546001600160a01b0319166001600160a01b0384161790558015611430575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6060611440611d36565b905090565b61144d6119dd565b6001600160a01b0381166114b25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ed565b610a9f81611aa0565b6114c3611e6a565b610e418282611f04565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631703a0186040518163ffffffff1660e01b81526004015f60405180830381865afa15801561152b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526115529190810190612e52565b8051519091505f816001600160401b0381111561157157611571612761565b60405190808252806020026020018201604052801561159a578160200160208202803683370190505b5090505f5b828110156115f85783518051829081106115bb576115bb612f45565b60200260200101515f01518282815181106115d8576115d8612f45565b6001600160a01b039092166020928302919091019091015260010161159f565b50604051639004134760e01b81525f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906390041347906116499089908690600401612f59565b5f60405180830381865afa158015611663573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261168a9190810190612fb4565b90505f836001600160401b038111156116a5576116a5612761565b6040519080825280602002602001820160405280156116ce578160200160208202803683370190505b5090505f805b85811015611713575f8482815181106116ef576116ef612f45565b6020026020010151111561170b578161170781613048565b9250505b6001016116d4565b505f816001600160401b0381111561172d5761172d612761565b604051908082528060200260200182016040528015611756578160200160208202803683370190505b5090505f5b868110156117d9575f85828151811061177657611776612f45565b602002602001015111156117d15783818151811061179657611796612f45565b60200260200101518282815181106117b0576117b0612f45565b60200260200101906001600160a01b031690816001600160a01b0316815250505b60010161175b565b5098975050505050505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018290525f90605c01604051602081830303815290604052805190602001209050919050565b5f805f6118458585612214565b915091506118528161227f565b509392505050565b5f8073__$ad319d1e12868f1c821b7f18b1142a0745$__630ecea30a87876040518363ffffffff1660e01b8152600401611895929190612d1b565b5f60405180830381865af41580156118af573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526118d69190810190613060565b90505f5b81518110156119cf575f73__$ad319d1e12868f1c821b7f18b1142a0745$__63b7b8346d84848151811061191057611910612f45565b6020026020010151602001516040518263ffffffff1660e01b81526004016119389190612e0a565b5f60405180830381865af4158015611952573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526119799190810190612b6f565b90506119858187611bea565b80156119b557508483838151811061199f5761199f612f45565b60200260200101515f01516001600160401b0316145b156119c657600193505050506119d5565b506001016118da565b505f9150505b949350505050565b6033546001600160a01b03163314610ab35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103ed565b606554604080516001600160a01b03928316815291831660208301527fe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b604051639926ee7d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639926ee7d90611b3f9085908590600401613143565b5f604051808303815f87803b158015611b56575f80fd5b505af1158015611b68573d5f803e3d5ffd5b505050505050565b6040516351b27a6d60e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063a364f4da906024015b5f604051808303815f87803b158015611bd1575f80fd5b505af1158015611be3573d5f803e3d5ffd5b5050505050565b5f8151835114611bfb57505f61030f565b5f5b8351811015611c6457828181518110611c1857611c18612f45565b602001015160f81c60f81b6001600160f81b031916848281518110611c3f57611c3f612f45565b01602001516001600160f81b03191614611c5c575f91505061030f565b600101611bfd565b5060019392505050565b60405163a98fb35560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a98fb35590611bba908490600401612e0a565b5f54610100900460ff16611d245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103ed565b611d2d82611aa0565b610e4181611a37565b60605f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631703a0186040518163ffffffff1660e01b81526004015f60405180830381865afa158015611d94573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611dbb9190810190612e52565b90505f815f0151516001600160401b03811115611dda57611dda612761565b604051908082528060200260200182016040528015611e03578160200160208202803683370190505b5090505f5b825151811015611e63578251805182908110611e2657611e26612f45565b60200260200101515f0151828281518110611e4357611e43612f45565b6001600160a01b0390921660209283029190910190910152600101611e08565b5092915050565b6065546001600160a01b03163314610ab35760405162461bcd60e51b815260206004820152605160248201527f4543445341536572766963654d616e61676572426173652e6f6e6c795265776160448201527f726473496e69746961746f723a2063616c6c6572206973206e6f7420746865206064820152703932bbb0b932399034b734ba34b0ba37b960791b608482015260a4016103ed565b5f5b818110156121c557828282818110611f2057611f20612f45565b9050602002810190611f32919061318d565b611f43906040810190602001612565565b6001600160a01b03166323b872dd3330868686818110611f6557611f65612f45565b9050602002810190611f77919061318d565b604080516001600160e01b031960e087901b1681526001600160a01b039485166004820152939092166024840152013560448201526064016020604051808303815f875af1158015611fcb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fef9190612d02565b505f83838381811061200357612003612f45565b9050602002810190612015919061318d565b612026906040810190602001612565565b604051636eb1769f60e11b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152919091169063dd62ed3e90604401602060405180830381865afa158015612092573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120b691906131b6565b90508383838181106120ca576120ca612f45565b90506020028101906120dc919061318d565b6120ed906040810190602001612565565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000008387878781811061212f5761212f612f45565b9050602002810190612141919061318d565b6040013561214f91906131cd565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303815f875af1158015612197573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121bb9190612d02565b5050600101611f06565b5060405163fce36c7d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fce36c7d90611b3f9085908590600401613257565b5f808251604103612248576020830151604084015160608501515f1a61223c87828585612434565b94509450505050612278565b82516040036122715760208301516040840151612266868383612519565b935093505050612278565b505f905060025b9250929050565b5f81600481111561229257612292613352565b0361229a5750565b60018160048111156122ae576122ae613352565b036122fb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016103ed565b600281600481111561230f5761230f613352565b0361235c5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016103ed565b600381600481111561237057612370613352565b036123c85760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016103ed565b60048160048111156123dc576123dc613352565b03610a9f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016103ed565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561246957505f90506003612510565b8460ff16601b1415801561248157508460ff16601c14155b1561249157505f90506004612510565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156124e2573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b03811661250a575f60019250925050612510565b91505f90505b94509492505050565b5f806001600160ff1b0383168161253560ff86901c601b6131cd565b905061254387828885612434565b935093505050935093915050565b6001600160a01b0381168114610a9f575f80fd5b5f60208284031215612575575f80fd5b813561258081612551565b9392505050565b602080825282518282018190525f9190848201906040850190845b818110156125c75783516001600160a01b0316835292840192918401916001016125a2565b50909695505050505050565b5f8083601f8401126125e3575f80fd5b5081356001600160401b038111156125f9575f80fd5b602083019150836020828501011115612278575f80fd5b5f805f60408486031215612622575f80fd5b833561262d81612551565b925060208401356001600160401b03811115612647575f80fd5b612653868287016125d3565b9497909650939450505050565b5f805f805f8060808789031215612675575f80fd5b863561268081612551565b95506020870135945060408701356001600160401b03808211156126a2575f80fd5b6126ae8a838b016125d3565b909650945060608901359150808211156126c6575f80fd5b506126d389828a016125d3565b979a9699509497509295939492505050565b5f805f805f606086880312156126f9575f80fd5b853561270481612551565b945060208601356001600160401b038082111561271f575f80fd5b61272b89838a016125d3565b90965094506040880135915080821115612743575f80fd5b50612750888289016125d3565b969995985093965092949392505050565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b038111828210171561279757612797612761565b60405290565b604051602081016001600160401b038111828210171561279757612797612761565b604080519081016001600160401b038111828210171561279757612797612761565b604051601f8201601f191681016001600160401b038111828210171561280957612809612761565b604052919050565b5f6001600160401b0382111561282957612829612761565b50601f01601f191660200190565b5f61284961284484612811565b6127e1565b905082815283838301111561285c575f80fd5b828260208301375f602084830101529392505050565b5f8060408385031215612883575f80fd5b823561288e81612551565b915060208301356001600160401b03808211156128a9575f80fd5b90840190606082870312156128bc575f80fd5b6128c4612775565b8235828111156128d2575f80fd5b83019150601f820187136128e4575f80fd5b6128f387833560208501612837565b815260208301356020820152604083013560408201528093505050509250929050565b5f805f8060408587031215612929575f80fd5b84356001600160401b038082111561293f575f80fd5b61294b888389016125d3565b90965094506020870135915080821115612963575f80fd5b50612970878288016125d3565b95989497509550505050565b5f6020828403121561298c575f80fd5b81356001600160401b038111156129a1575f80fd5b8201601f810184136129b1575f80fd5b6119d584823560208401612837565b5f805f606084860312156129d2575f80fd5b83356129dd81612551565b925060208401356129ed81612551565b915060408401356129fd81612551565b809150509250925092565b5f8060208385031215612a19575f80fd5b82356001600160401b0380821115612a2f575f80fd5b818501915085601f830112612a42575f80fd5b813581811115612a50575f80fd5b8660208260051b8501011115612a64575f80fd5b60209290920196919550909350505050565b5f60208284031215612a86575f80fd5b815161258081612551565b80518015158114612aa0575f80fd5b919050565b5f60608284031215612ab5575f80fd5b612abd612775565b8251815260208301516020820152612ad760408401612a91565b60408201529392505050565b60208082526036908201527f4f6e6c79206f70657261746f722074686174206f776e732074686520706f642060408201527518d85b881c1c9bd8d95cdcc81dda5d1a191c985dd85b60521b606082015260800190565b5f612b4661284484612811565b9050828152838383011115612b59575f80fd5b8282602083015e5f602084830101529392505050565b5f60208284031215612b7f575f80fd5b81516001600160401b03811115612b94575f80fd5b8201601f81018413612ba4575f80fd5b6119d584825160208401612b39565b5f81518060208401855e5f93019283525090919050565b6001600160601b03198660601b168152846014820152828460348301375f6034848301015f8152612bfb8185612bb3565b98975050505050505050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b6001600160a01b03841681526040602082018190525f90612c539083018486612c07565b95945050505050565b6001600160601b03198560601b168152828460148301375f6014848301015f8152612c878185612bb3565b979650505050505050565b6020808252604a908201527f4543445341536572766963654d616e61676572426173652e6f6e6c795374616b60408201527f6552656769737472793a2063616c6c6572206973206e6f7420746865207374616060820152696b65526567697374727960b01b608082015260a00190565b5f60208284031215612d12575f80fd5b61258082612a91565b602081525f6119d5602083018486612c07565b5f82601f830112612d3d575f80fd5b61258083835160208501612b39565b5f8060408385031215612d5d575f80fd5b82516001600160401b0380821115612d73575f80fd5b612d7f86838701612d2e565b93506020850151915080821115612d94575f80fd5b50612da185828601612d2e565b9150509250929050565b5f60208284031215612dbb575f80fd5b81516001600160401b03811115612dd0575f80fd5b6119d584828501612d2e565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6125806020830184612ddc565b5f6001600160401b03821115612e3457612e34612761565b5060051b60200190565b6001600160601b0381168114610a9f575f80fd5b5f6020808385031215612e63575f80fd5b82516001600160401b0380821115612e79575f80fd5b8185019150828287031215612e8c575f80fd5b612e9461279d565b825182811115612ea2575f80fd5b80840193505086601f840112612eb6575f80fd5b82519150612ec661284483612e1c565b82815260069290921b83018401918481019088841115612ee4575f80fd5b938501935b83851015612f38576040858a031215612f00575f80fd5b612f086127bf565b8551612f1381612551565b815285870151612f2281612e3e565b8188015282526040949094019390850190612ee9565b8252509695505050505050565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b0383811682526040602080840182905284519184018290525f92858201929091906060860190855b81811015612fa6578551851683529483019491830191600101612f88565b509098975050505050505050565b5f6020808385031215612fc5575f80fd5b82516001600160401b03811115612fda575f80fd5b8301601f81018513612fea575f80fd5b8051612ff861284482612e1c565b81815260059190911b82018301908381019087831115613016575f80fd5b928401925b82841015612c875783518252928401929084019061301b565b634e487b7160e01b5f52601160045260245ffd5b5f6001820161305957613059613034565b5060010190565b5f6020808385031215613071575f80fd5b82516001600160401b0380821115613087575f80fd5b818501915085601f83011261309a575f80fd5b81516130a861284482612e1c565b81815260059190911b830184019084810190888311156130c6575f80fd5b8585015b838110156117d9578051858111156130e0575f80fd5b86016040818c03601f19018113156130f6575f80fd5b6130fe6127bf565b89830151888116811461310f575f80fd5b8152908201519087821115613122575f80fd5b6131308d8b84860101612d2e565b818b0152855250509186019186016130ca565b60018060a01b0383168152604060208201525f82516060604084015261316c60a0840182612ddc565b90506020840151606084015260408401516080840152809150509392505050565b5f8235609e198336030181126131a1575f80fd5b9190910192915050565b8035612aa081612551565b5f602082840312156131c6575f80fd5b5051919050565b8082018082111561030f5761030f613034565b8183525f60208085019450825f5b8581101561323957813561320181612551565b6001600160a01b031687528183013561321981612e3e565b6001600160601b03168784015260409687019691909101906001016131ee565b509495945050505050565b803563ffffffff81168114612aa0575f80fd5b60208082528181018390525f906040808401600586901b8501820187855b88811015612fa657878303603f190184528135368b9003609e1901811261329a575f80fd5b8a0160a0813536839003601e190181126132b2575f80fd5b820188810190356001600160401b038111156132cc575f80fd5b8060061b36038213156132dd575f80fd5b8287526132ed83880182846131e0565b925050506132fc8883016131ab565b6001600160a01b0316888601528187013587860152606061331e818401613244565b63ffffffff16908601526080613335838201613244565b63ffffffff16950194909452509285019290850190600101613275565b634e487b7160e01b5f52602160045260245ffdfea264697066735822122087dfe38b7fdff2008acade504fca307153f200f175a59577281c9f90e5807c8264736f6c63430008190033",
}

// BitDSMServiceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use BitDSMServiceManagerMetaData.ABI instead.
var BitDSMServiceManagerABI = BitDSMServiceManagerMetaData.ABI

// BitDSMServiceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BitDSMServiceManagerMetaData.Bin instead.
var BitDSMServiceManagerBin = BitDSMServiceManagerMetaData.Bin

// DeployBitDSMServiceManager deploys a new Ethereum contract, binding an instance of BitDSMServiceManager to it.
func DeployBitDSMServiceManager(auth *bind.TransactOpts, backend bind.ContractBackend, _avsDirectory common.Address, _bitDSMRegistry common.Address, _rewardsCoordinator common.Address, _delegationManager common.Address) (common.Address, *types.Transaction, *BitDSMServiceManager, error) {
	parsed, err := BitDSMServiceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BitDSMServiceManagerBin), backend, _avsDirectory, _bitDSMRegistry, _rewardsCoordinator, _delegationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BitDSMServiceManager{BitDSMServiceManagerCaller: BitDSMServiceManagerCaller{contract: contract}, BitDSMServiceManagerTransactor: BitDSMServiceManagerTransactor{contract: contract}, BitDSMServiceManagerFilterer: BitDSMServiceManagerFilterer{contract: contract}}, nil
}

// BitDSMServiceManager is an auto generated Go binding around an Ethereum contract.
type BitDSMServiceManager struct {
	BitDSMServiceManagerCaller     // Read-only binding to the contract
	BitDSMServiceManagerTransactor // Write-only binding to the contract
	BitDSMServiceManagerFilterer   // Log filterer for contract events
}

// BitDSMServiceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type BitDSMServiceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitDSMServiceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BitDSMServiceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitDSMServiceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BitDSMServiceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitDSMServiceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BitDSMServiceManagerSession struct {
	Contract     *BitDSMServiceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BitDSMServiceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BitDSMServiceManagerCallerSession struct {
	Contract *BitDSMServiceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BitDSMServiceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BitDSMServiceManagerTransactorSession struct {
	Contract     *BitDSMServiceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BitDSMServiceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type BitDSMServiceManagerRaw struct {
	Contract *BitDSMServiceManager // Generic contract binding to access the raw methods on
}

// BitDSMServiceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BitDSMServiceManagerCallerRaw struct {
	Contract *BitDSMServiceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// BitDSMServiceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BitDSMServiceManagerTransactorRaw struct {
	Contract *BitDSMServiceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBitDSMServiceManager creates a new instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManager(address common.Address, backend bind.ContractBackend) (*BitDSMServiceManager, error) {
	contract, err := bindBitDSMServiceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManager{BitDSMServiceManagerCaller: BitDSMServiceManagerCaller{contract: contract}, BitDSMServiceManagerTransactor: BitDSMServiceManagerTransactor{contract: contract}, BitDSMServiceManagerFilterer: BitDSMServiceManagerFilterer{contract: contract}}, nil
}

// NewBitDSMServiceManagerCaller creates a new read-only instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManagerCaller(address common.Address, caller bind.ContractCaller) (*BitDSMServiceManagerCaller, error) {
	contract, err := bindBitDSMServiceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerCaller{contract: contract}, nil
}

// NewBitDSMServiceManagerTransactor creates a new write-only instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*BitDSMServiceManagerTransactor, error) {
	contract, err := bindBitDSMServiceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerTransactor{contract: contract}, nil
}

// NewBitDSMServiceManagerFilterer creates a new log filterer instance of BitDSMServiceManager, bound to a specific deployed contract.
func NewBitDSMServiceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*BitDSMServiceManagerFilterer, error) {
	contract, err := bindBitDSMServiceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerFilterer{contract: contract}, nil
}

// bindBitDSMServiceManager binds a generic wrapper to an already deployed contract.
func bindBitDSMServiceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BitDSMServiceManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BitDSMServiceManager *BitDSMServiceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BitDSMServiceManager.Contract.BitDSMServiceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BitDSMServiceManager *BitDSMServiceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.BitDSMServiceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BitDSMServiceManager *BitDSMServiceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.BitDSMServiceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BitDSMServiceManager *BitDSMServiceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BitDSMServiceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.contract.Transact(opts, method, params...)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "avsDirectory")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) AvsDirectory() (common.Address, error) {
	return _BitDSMServiceManager.Contract.AvsDirectory(&_BitDSMServiceManager.CallOpts)
}

// AvsDirectory is a free data retrieval call binding the contract method 0x6b3aa72e.
//
// Solidity: function avsDirectory() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) AvsDirectory() (common.Address, error) {
	return _BitDSMServiceManager.Contract.AvsDirectory(&_BitDSMServiceManager.CallOpts)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address _operator) view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) GetOperatorRestakedStrategies(opts *bind.CallOpts, _operator common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "getOperatorRestakedStrategies", _operator)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address _operator) view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerSession) GetOperatorRestakedStrategies(_operator common.Address) ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetOperatorRestakedStrategies(&_BitDSMServiceManager.CallOpts, _operator)
}

// GetOperatorRestakedStrategies is a free data retrieval call binding the contract method 0x33cfb7b7.
//
// Solidity: function getOperatorRestakedStrategies(address _operator) view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) GetOperatorRestakedStrategies(_operator common.Address) ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetOperatorRestakedStrategies(&_BitDSMServiceManager.CallOpts, _operator)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "getRestakeableStrategies")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetRestakeableStrategies(&_BitDSMServiceManager.CallOpts)
}

// GetRestakeableStrategies is a free data retrieval call binding the contract method 0xe481af9d.
//
// Solidity: function getRestakeableStrategies() view returns(address[])
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) GetRestakeableStrategies() ([]common.Address, error) {
	return _BitDSMServiceManager.Contract.GetRestakeableStrategies(&_BitDSMServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) Owner() (common.Address, error) {
	return _BitDSMServiceManager.Contract.Owner(&_BitDSMServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) Owner() (common.Address, error) {
	return _BitDSMServiceManager.Contract.Owner(&_BitDSMServiceManager.CallOpts)
}

// RewardsInitiator is a free data retrieval call binding the contract method 0xfc299dee.
//
// Solidity: function rewardsInitiator() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) RewardsInitiator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "rewardsInitiator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardsInitiator is a free data retrieval call binding the contract method 0xfc299dee.
//
// Solidity: function rewardsInitiator() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) RewardsInitiator() (common.Address, error) {
	return _BitDSMServiceManager.Contract.RewardsInitiator(&_BitDSMServiceManager.CallOpts)
}

// RewardsInitiator is a free data retrieval call binding the contract method 0xfc299dee.
//
// Solidity: function rewardsInitiator() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) RewardsInitiator() (common.Address, error) {
	return _BitDSMServiceManager.Contract.RewardsInitiator(&_BitDSMServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BitDSMServiceManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerSession) StakeRegistry() (common.Address, error) {
	return _BitDSMServiceManager.Contract.StakeRegistry(&_BitDSMServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_BitDSMServiceManager *BitDSMServiceManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _BitDSMServiceManager.Contract.StakeRegistry(&_BitDSMServiceManager.CallOpts)
}

// ConfirmDeposit is a paid mutator transaction binding the contract method 0x34c9b14e.
//
// Solidity: function confirmDeposit(address pod, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) ConfirmDeposit(opts *bind.TransactOpts, pod common.Address, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "confirmDeposit", pod, signature)
}

// ConfirmDeposit is a paid mutator transaction binding the contract method 0x34c9b14e.
//
// Solidity: function confirmDeposit(address pod, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) ConfirmDeposit(pod common.Address, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmDeposit(&_BitDSMServiceManager.TransactOpts, pod, signature)
}

// ConfirmDeposit is a paid mutator transaction binding the contract method 0x34c9b14e.
//
// Solidity: function confirmDeposit(address pod, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) ConfirmDeposit(pod common.Address, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmDeposit(&_BitDSMServiceManager.TransactOpts, pod, signature)
}

// ConfirmWithdrawal is a paid mutator transaction binding the contract method 0x7b615541.
//
// Solidity: function confirmWithdrawal(address pod, bytes transaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) ConfirmWithdrawal(opts *bind.TransactOpts, pod common.Address, transaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "confirmWithdrawal", pod, transaction, signature)
}

// ConfirmWithdrawal is a paid mutator transaction binding the contract method 0x7b615541.
//
// Solidity: function confirmWithdrawal(address pod, bytes transaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) ConfirmWithdrawal(pod common.Address, transaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmWithdrawal(&_BitDSMServiceManager.TransactOpts, pod, transaction, signature)
}

// ConfirmWithdrawal is a paid mutator transaction binding the contract method 0x7b615541.
//
// Solidity: function confirmWithdrawal(address pod, bytes transaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) ConfirmWithdrawal(pod common.Address, transaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.ConfirmWithdrawal(&_BitDSMServiceManager.TransactOpts, pod, transaction, signature)
}

// CreateAVSRewardsSubmission is a paid mutator transaction binding the contract method 0xfce36c7d.
//
// Solidity: function createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[] rewardsSubmissions) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) CreateAVSRewardsSubmission(opts *bind.TransactOpts, rewardsSubmissions []IRewardsCoordinatorRewardsSubmission) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "createAVSRewardsSubmission", rewardsSubmissions)
}

// CreateAVSRewardsSubmission is a paid mutator transaction binding the contract method 0xfce36c7d.
//
// Solidity: function createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[] rewardsSubmissions) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) CreateAVSRewardsSubmission(rewardsSubmissions []IRewardsCoordinatorRewardsSubmission) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.CreateAVSRewardsSubmission(&_BitDSMServiceManager.TransactOpts, rewardsSubmissions)
}

// CreateAVSRewardsSubmission is a paid mutator transaction binding the contract method 0xfce36c7d.
//
// Solidity: function createAVSRewardsSubmission(((address,uint96)[],address,uint256,uint32,uint32)[] rewardsSubmissions) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) CreateAVSRewardsSubmission(rewardsSubmissions []IRewardsCoordinatorRewardsSubmission) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.CreateAVSRewardsSubmission(&_BitDSMServiceManager.TransactOpts, rewardsSubmissions)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) DeregisterOperatorFromAVS(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "deregisterOperatorFromAVS", operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.DeregisterOperatorFromAVS(&_BitDSMServiceManager.TransactOpts, operator)
}

// DeregisterOperatorFromAVS is a paid mutator transaction binding the contract method 0xa364f4da.
//
// Solidity: function deregisterOperatorFromAVS(address operator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) DeregisterOperatorFromAVS(operator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.DeregisterOperatorFromAVS(&_BitDSMServiceManager.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _owner, address _rewardsInitiator, address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) Initialize(opts *bind.TransactOpts, _owner common.Address, _rewardsInitiator common.Address, bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "initialize", _owner, _rewardsInitiator, bitcoinPodManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _owner, address _rewardsInitiator, address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) Initialize(_owner common.Address, _rewardsInitiator common.Address, bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.Initialize(&_BitDSMServiceManager.TransactOpts, _owner, _rewardsInitiator, bitcoinPodManager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _owner, address _rewardsInitiator, address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) Initialize(_owner common.Address, _rewardsInitiator common.Address, bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.Initialize(&_BitDSMServiceManager.TransactOpts, _owner, _rewardsInitiator, bitcoinPodManager)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) RegisterOperatorToAVS(opts *bind.TransactOpts, operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "registerOperatorToAVS", operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RegisterOperatorToAVS(&_BitDSMServiceManager.TransactOpts, operator, operatorSignature)
}

// RegisterOperatorToAVS is a paid mutator transaction binding the contract method 0x9926ee7d.
//
// Solidity: function registerOperatorToAVS(address operator, (bytes,bytes32,uint256) operatorSignature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) RegisterOperatorToAVS(operator common.Address, operatorSignature ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RegisterOperatorToAVS(&_BitDSMServiceManager.TransactOpts, operator, operatorSignature)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RenounceOwnership(&_BitDSMServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.RenounceOwnership(&_BitDSMServiceManager.TransactOpts)
}

// SetBitcoinPodManager is a paid mutator transaction binding the contract method 0x818001a1.
//
// Solidity: function setBitcoinPodManager(address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) SetBitcoinPodManager(opts *bind.TransactOpts, bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "setBitcoinPodManager", bitcoinPodManager)
}

// SetBitcoinPodManager is a paid mutator transaction binding the contract method 0x818001a1.
//
// Solidity: function setBitcoinPodManager(address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) SetBitcoinPodManager(bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.SetBitcoinPodManager(&_BitDSMServiceManager.TransactOpts, bitcoinPodManager)
}

// SetBitcoinPodManager is a paid mutator transaction binding the contract method 0x818001a1.
//
// Solidity: function setBitcoinPodManager(address bitcoinPodManager) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) SetBitcoinPodManager(bitcoinPodManager common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.SetBitcoinPodManager(&_BitDSMServiceManager.TransactOpts, bitcoinPodManager)
}

// SetRewardsInitiator is a paid mutator transaction binding the contract method 0x3bc28c8c.
//
// Solidity: function setRewardsInitiator(address newRewardsInitiator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) SetRewardsInitiator(opts *bind.TransactOpts, newRewardsInitiator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "setRewardsInitiator", newRewardsInitiator)
}

// SetRewardsInitiator is a paid mutator transaction binding the contract method 0x3bc28c8c.
//
// Solidity: function setRewardsInitiator(address newRewardsInitiator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) SetRewardsInitiator(newRewardsInitiator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.SetRewardsInitiator(&_BitDSMServiceManager.TransactOpts, newRewardsInitiator)
}

// SetRewardsInitiator is a paid mutator transaction binding the contract method 0x3bc28c8c.
//
// Solidity: function setRewardsInitiator(address newRewardsInitiator) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) SetRewardsInitiator(newRewardsInitiator common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.SetRewardsInitiator(&_BitDSMServiceManager.TransactOpts, newRewardsInitiator)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.TransferOwnership(&_BitDSMServiceManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.TransferOwnership(&_BitDSMServiceManager.TransactOpts, newOwner)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) UpdateAVSMetadataURI(opts *bind.TransactOpts, _metadataURI string) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "updateAVSMetadataURI", _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.UpdateAVSMetadataURI(&_BitDSMServiceManager.TransactOpts, _metadataURI)
}

// UpdateAVSMetadataURI is a paid mutator transaction binding the contract method 0xa98fb355.
//
// Solidity: function updateAVSMetadataURI(string _metadataURI) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) UpdateAVSMetadataURI(_metadataURI string) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.UpdateAVSMetadataURI(&_BitDSMServiceManager.TransactOpts, _metadataURI)
}

// VerifyBTCAddress is a paid mutator transaction binding the contract method 0xa7d239b1.
//
// Solidity: function verifyBTCAddress(string btcAddress, bytes script) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) VerifyBTCAddress(opts *bind.TransactOpts, btcAddress string, script []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "verifyBTCAddress", btcAddress, script)
}

// VerifyBTCAddress is a paid mutator transaction binding the contract method 0xa7d239b1.
//
// Solidity: function verifyBTCAddress(string btcAddress, bytes script) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) VerifyBTCAddress(btcAddress string, script []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.VerifyBTCAddress(&_BitDSMServiceManager.TransactOpts, btcAddress, script)
}

// VerifyBTCAddress is a paid mutator transaction binding the contract method 0xa7d239b1.
//
// Solidity: function verifyBTCAddress(string btcAddress, bytes script) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) VerifyBTCAddress(btcAddress string, script []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.VerifyBTCAddress(&_BitDSMServiceManager.TransactOpts, btcAddress, script)
}

// WithdrawBitcoinCompleteTx is a paid mutator transaction binding the contract method 0x3b7d82ef.
//
// Solidity: function withdrawBitcoinCompleteTx(address pod, uint256 amount, bytes completeTx, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) WithdrawBitcoinCompleteTx(opts *bind.TransactOpts, pod common.Address, amount *big.Int, completeTx []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "withdrawBitcoinCompleteTx", pod, amount, completeTx, signature)
}

// WithdrawBitcoinCompleteTx is a paid mutator transaction binding the contract method 0x3b7d82ef.
//
// Solidity: function withdrawBitcoinCompleteTx(address pod, uint256 amount, bytes completeTx, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) WithdrawBitcoinCompleteTx(pod common.Address, amount *big.Int, completeTx []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinCompleteTx(&_BitDSMServiceManager.TransactOpts, pod, amount, completeTx, signature)
}

// WithdrawBitcoinCompleteTx is a paid mutator transaction binding the contract method 0x3b7d82ef.
//
// Solidity: function withdrawBitcoinCompleteTx(address pod, uint256 amount, bytes completeTx, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) WithdrawBitcoinCompleteTx(pod common.Address, amount *big.Int, completeTx []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinCompleteTx(&_BitDSMServiceManager.TransactOpts, pod, amount, completeTx, signature)
}

// WithdrawBitcoinPSBT is a paid mutator transaction binding the contract method 0x3b1a4e44.
//
// Solidity: function withdrawBitcoinPSBT(address pod, uint256 amount, bytes psbtTransaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactor) WithdrawBitcoinPSBT(opts *bind.TransactOpts, pod common.Address, amount *big.Int, psbtTransaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.contract.Transact(opts, "withdrawBitcoinPSBT", pod, amount, psbtTransaction, signature)
}

// WithdrawBitcoinPSBT is a paid mutator transaction binding the contract method 0x3b1a4e44.
//
// Solidity: function withdrawBitcoinPSBT(address pod, uint256 amount, bytes psbtTransaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerSession) WithdrawBitcoinPSBT(pod common.Address, amount *big.Int, psbtTransaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinPSBT(&_BitDSMServiceManager.TransactOpts, pod, amount, psbtTransaction, signature)
}

// WithdrawBitcoinPSBT is a paid mutator transaction binding the contract method 0x3b1a4e44.
//
// Solidity: function withdrawBitcoinPSBT(address pod, uint256 amount, bytes psbtTransaction, bytes signature) returns()
func (_BitDSMServiceManager *BitDSMServiceManagerTransactorSession) WithdrawBitcoinPSBT(pod common.Address, amount *big.Int, psbtTransaction []byte, signature []byte) (*types.Transaction, error) {
	return _BitDSMServiceManager.Contract.WithdrawBitcoinPSBT(&_BitDSMServiceManager.TransactOpts, pod, amount, psbtTransaction, signature)
}

// BitDSMServiceManagerBTCAddressVerifiedIterator is returned from FilterBTCAddressVerified and is used to iterate over the raw logs and unpacked data for BTCAddressVerified events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerBTCAddressVerifiedIterator struct {
	Event *BitDSMServiceManagerBTCAddressVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerBTCAddressVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerBTCAddressVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerBTCAddressVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerBTCAddressVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerBTCAddressVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerBTCAddressVerified represents a BTCAddressVerified event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerBTCAddressVerified struct {
	Operator   common.Address
	BtcAddress string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBTCAddressVerified is a free log retrieval operation binding the contract event 0xabc3bc0a50a83331466b147d3ce6d2a71cc52bfa15d52467b4860bb8d08c206b.
//
// Solidity: event BTCAddressVerified(address indexed operator, string btcAddress)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterBTCAddressVerified(opts *bind.FilterOpts, operator []common.Address) (*BitDSMServiceManagerBTCAddressVerifiedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "BTCAddressVerified", operatorRule)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerBTCAddressVerifiedIterator{contract: _BitDSMServiceManager.contract, event: "BTCAddressVerified", logs: logs, sub: sub}, nil
}

// WatchBTCAddressVerified is a free log subscription operation binding the contract event 0xabc3bc0a50a83331466b147d3ce6d2a71cc52bfa15d52467b4860bb8d08c206b.
//
// Solidity: event BTCAddressVerified(address indexed operator, string btcAddress)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchBTCAddressVerified(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerBTCAddressVerified, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "BTCAddressVerified", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerBTCAddressVerified)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "BTCAddressVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBTCAddressVerified is a log parse operation binding the contract event 0xabc3bc0a50a83331466b147d3ce6d2a71cc52bfa15d52467b4860bb8d08c206b.
//
// Solidity: event BTCAddressVerified(address indexed operator, string btcAddress)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseBTCAddressVerified(log types.Log) (*BitDSMServiceManagerBTCAddressVerified, error) {
	event := new(BitDSMServiceManagerBTCAddressVerified)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "BTCAddressVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator is returned from FilterBitcoinWithdrawalTransactionSigned and is used to iterate over the raw logs and unpacked data for BitcoinWithdrawalTransactionSigned events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator struct {
	Event *BitDSMServiceManagerBitcoinWithdrawalTransactionSigned // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerBitcoinWithdrawalTransactionSigned represents a BitcoinWithdrawalTransactionSigned event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerBitcoinWithdrawalTransactionSigned struct {
	Pod      common.Address
	Operator common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBitcoinWithdrawalTransactionSigned is a free log retrieval operation binding the contract event 0xce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc7.
//
// Solidity: event BitcoinWithdrawalTransactionSigned(address indexed pod, address indexed operator, uint256 amount)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterBitcoinWithdrawalTransactionSigned(opts *bind.FilterOpts, pod []common.Address, operator []common.Address) (*BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "BitcoinWithdrawalTransactionSigned", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerBitcoinWithdrawalTransactionSignedIterator{contract: _BitDSMServiceManager.contract, event: "BitcoinWithdrawalTransactionSigned", logs: logs, sub: sub}, nil
}

// WatchBitcoinWithdrawalTransactionSigned is a free log subscription operation binding the contract event 0xce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc7.
//
// Solidity: event BitcoinWithdrawalTransactionSigned(address indexed pod, address indexed operator, uint256 amount)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchBitcoinWithdrawalTransactionSigned(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerBitcoinWithdrawalTransactionSigned, pod []common.Address, operator []common.Address) (event.Subscription, error) {

	var podRule []interface{}
	for _, podItem := range pod {
		podRule = append(podRule, podItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "BitcoinWithdrawalTransactionSigned", podRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "BitcoinWithdrawalTransactionSigned", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBitcoinWithdrawalTransactionSigned is a log parse operation binding the contract event 0xce93a128bcccad6214b8d927323bca4acc32d14ee0ca93c4e647530c44306fc7.
//
// Solidity: event BitcoinWithdrawalTransactionSigned(address indexed pod, address indexed operator, uint256 amount)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseBitcoinWithdrawalTransactionSigned(log types.Log) (*BitDSMServiceManagerBitcoinWithdrawalTransactionSigned, error) {
	event := new(BitDSMServiceManagerBitcoinWithdrawalTransactionSigned)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "BitcoinWithdrawalTransactionSigned", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BitDSMServiceManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerInitializedIterator struct {
	Event *BitDSMServiceManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerInitialized represents a Initialized event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*BitDSMServiceManagerInitializedIterator, error) {

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerInitializedIterator{contract: _BitDSMServiceManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerInitialized)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseInitialized(log types.Log) (*BitDSMServiceManagerInitialized, error) {
	event := new(BitDSMServiceManagerInitialized)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BitDSMServiceManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerOwnershipTransferredIterator struct {
	Event *BitDSMServiceManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerOwnershipTransferred represents a OwnershipTransferred event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BitDSMServiceManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerOwnershipTransferredIterator{contract: _BitDSMServiceManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerOwnershipTransferred)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseOwnershipTransferred(log types.Log) (*BitDSMServiceManagerOwnershipTransferred, error) {
	event := new(BitDSMServiceManagerOwnershipTransferred)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BitDSMServiceManagerRewardsInitiatorUpdatedIterator is returned from FilterRewardsInitiatorUpdated and is used to iterate over the raw logs and unpacked data for RewardsInitiatorUpdated events raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerRewardsInitiatorUpdatedIterator struct {
	Event *BitDSMServiceManagerRewardsInitiatorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BitDSMServiceManagerRewardsInitiatorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BitDSMServiceManagerRewardsInitiatorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BitDSMServiceManagerRewardsInitiatorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BitDSMServiceManagerRewardsInitiatorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BitDSMServiceManagerRewardsInitiatorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BitDSMServiceManagerRewardsInitiatorUpdated represents a RewardsInitiatorUpdated event raised by the BitDSMServiceManager contract.
type BitDSMServiceManagerRewardsInitiatorUpdated struct {
	PrevRewardsInitiator common.Address
	NewRewardsInitiator  common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterRewardsInitiatorUpdated is a free log retrieval operation binding the contract event 0xe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3.
//
// Solidity: event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) FilterRewardsInitiatorUpdated(opts *bind.FilterOpts) (*BitDSMServiceManagerRewardsInitiatorUpdatedIterator, error) {

	logs, sub, err := _BitDSMServiceManager.contract.FilterLogs(opts, "RewardsInitiatorUpdated")
	if err != nil {
		return nil, err
	}
	return &BitDSMServiceManagerRewardsInitiatorUpdatedIterator{contract: _BitDSMServiceManager.contract, event: "RewardsInitiatorUpdated", logs: logs, sub: sub}, nil
}

// WatchRewardsInitiatorUpdated is a free log subscription operation binding the contract event 0xe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3.
//
// Solidity: event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) WatchRewardsInitiatorUpdated(opts *bind.WatchOpts, sink chan<- *BitDSMServiceManagerRewardsInitiatorUpdated) (event.Subscription, error) {

	logs, sub, err := _BitDSMServiceManager.contract.WatchLogs(opts, "RewardsInitiatorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BitDSMServiceManagerRewardsInitiatorUpdated)
				if err := _BitDSMServiceManager.contract.UnpackLog(event, "RewardsInitiatorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsInitiatorUpdated is a log parse operation binding the contract event 0xe11cddf1816a43318ca175bbc52cd0185436e9cbead7c83acc54a73e461717e3.
//
// Solidity: event RewardsInitiatorUpdated(address prevRewardsInitiator, address newRewardsInitiator)
func (_BitDSMServiceManager *BitDSMServiceManagerFilterer) ParseRewardsInitiatorUpdated(log types.Log) (*BitDSMServiceManagerRewardsInitiatorUpdated, error) {
	event := new(BitDSMServiceManagerRewardsInitiatorUpdated)
	if err := _BitDSMServiceManager.contract.UnpackLog(event, "RewardsInitiatorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
